// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// libpigpio: GPIO for Raspberry Pi
class LibPiGpio {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  LibPiGpio(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int sched_yield() {
    _sched_yield ??=
        _dylib.lookupFunction<_c_sched_yield, _dart_sched_yield>('sched_yield');
    return _sched_yield();
  }

  _dart_sched_yield _sched_yield;

  int sched_get_priority_min(
    int arg0,
  ) {
    _sched_get_priority_min ??= _dylib.lookupFunction<_c_sched_get_priority_min,
        _dart_sched_get_priority_min>('sched_get_priority_min');
    return _sched_get_priority_min(
      arg0,
    );
  }

  _dart_sched_get_priority_min _sched_get_priority_min;

  int sched_get_priority_max(
    int arg0,
  ) {
    _sched_get_priority_max ??= _dylib.lookupFunction<_c_sched_get_priority_max,
        _dart_sched_get_priority_max>('sched_get_priority_max');
    return _sched_get_priority_max(
      arg0,
    );
  }

  _dart_sched_get_priority_max _sched_get_priority_max;

  ffi.Pointer<ffi.Int8> asctime(
    ffi.Pointer<tm> arg0,
  ) {
    _asctime ??= _dylib.lookupFunction<_c_asctime, _dart_asctime>('asctime');
    return _asctime(
      arg0,
    );
  }

  _dart_asctime _asctime;

  int clock() {
    _clock ??= _dylib.lookupFunction<_c_clock, _dart_clock>('clock');
    return _clock();
  }

  _dart_clock _clock;

  ffi.Pointer<ffi.Int8> ctime(
    ffi.Pointer<ffi.Int64> arg0,
  ) {
    _ctime ??= _dylib.lookupFunction<_c_ctime, _dart_ctime>('ctime');
    return _ctime(
      arg0,
    );
  }

  _dart_ctime _ctime;

  double difftime(
    int arg0,
    int arg1,
  ) {
    _difftime ??=
        _dylib.lookupFunction<_c_difftime, _dart_difftime>('difftime');
    return _difftime(
      arg0,
      arg1,
    );
  }

  _dart_difftime _difftime;

  ffi.Pointer<tm> getdate(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _getdate ??= _dylib.lookupFunction<_c_getdate, _dart_getdate>('getdate');
    return _getdate(
      arg0,
    );
  }

  _dart_getdate _getdate;

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<ffi.Int64> arg0,
  ) {
    _gmtime ??= _dylib.lookupFunction<_c_gmtime, _dart_gmtime>('gmtime');
    return _gmtime(
      arg0,
    );
  }

  _dart_gmtime _gmtime;

  ffi.Pointer<tm> localtime(
    ffi.Pointer<ffi.Int64> arg0,
  ) {
    _localtime ??=
        _dylib.lookupFunction<_c_localtime, _dart_localtime>('localtime');
    return _localtime(
      arg0,
    );
  }

  _dart_localtime _localtime;

  int mktime(
    ffi.Pointer<tm> arg0,
  ) {
    _mktime ??= _dylib.lookupFunction<_c_mktime, _dart_mktime>('mktime');
    return _mktime(
      arg0,
    );
  }

  _dart_mktime _mktime;

  int strftime(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<tm> arg3,
  ) {
    _strftime ??=
        _dylib.lookupFunction<_c_strftime, _dart_strftime>('strftime');
    return _strftime(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_strftime _strftime;

  ffi.Pointer<ffi.Int8> strptime(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<tm> arg2,
  ) {
    _strptime ??=
        _dylib.lookupFunction<_c_strptime, _dart_strptime>('strptime');
    return _strptime(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_strptime _strptime;

  int time(
    ffi.Pointer<ffi.Int64> arg0,
  ) {
    _time ??= _dylib.lookupFunction<_c_time, _dart_time>('time');
    return _time(
      arg0,
    );
  }

  _dart_time _time;

  void tzset() {
    _tzset ??= _dylib.lookupFunction<_c_tzset, _dart_tzset>('tzset');
    return _tzset();
  }

  _dart_tzset _tzset;

  ffi.Pointer<ffi.Int8> asctime_r(
    ffi.Pointer<tm> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _asctime_r ??=
        _dylib.lookupFunction<_c_asctime_r, _dart_asctime_r>('asctime_r');
    return _asctime_r(
      arg0,
      arg1,
    );
  }

  _dart_asctime_r _asctime_r;

  ffi.Pointer<ffi.Int8> ctime_r(
    ffi.Pointer<ffi.Int64> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _ctime_r ??= _dylib.lookupFunction<_c_ctime_r, _dart_ctime_r>('ctime_r');
    return _ctime_r(
      arg0,
      arg1,
    );
  }

  _dart_ctime_r _ctime_r;

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<ffi.Int64> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    _gmtime_r ??=
        _dylib.lookupFunction<_c_gmtime_r, _dart_gmtime_r>('gmtime_r');
    return _gmtime_r(
      arg0,
      arg1,
    );
  }

  _dart_gmtime_r _gmtime_r;

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<ffi.Int64> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    _localtime_r ??=
        _dylib.lookupFunction<_c_localtime_r, _dart_localtime_r>('localtime_r');
    return _localtime_r(
      arg0,
      arg1,
    );
  }

  _dart_localtime_r _localtime_r;

  int posix2time(
    int arg0,
  ) {
    _posix2time ??=
        _dylib.lookupFunction<_c_posix2time, _dart_posix2time>('posix2time');
    return _posix2time(
      arg0,
    );
  }

  _dart_posix2time _posix2time;

  void tzsetwall() {
    _tzsetwall ??=
        _dylib.lookupFunction<_c_tzsetwall, _dart_tzsetwall>('tzsetwall');
    return _tzsetwall();
  }

  _dart_tzsetwall _tzsetwall;

  int time2posix(
    int arg0,
  ) {
    _time2posix ??=
        _dylib.lookupFunction<_c_time2posix, _dart_time2posix>('time2posix');
    return _time2posix(
      arg0,
    );
  }

  _dart_time2posix _time2posix;

  int timelocal(
    ffi.Pointer<tm> arg0,
  ) {
    _timelocal ??=
        _dylib.lookupFunction<_c_timelocal, _dart_timelocal>('timelocal');
    return _timelocal(
      arg0,
    );
  }

  _dart_timelocal _timelocal;

  int timegm(
    ffi.Pointer<tm> arg0,
  ) {
    _timegm ??= _dylib.lookupFunction<_c_timegm, _dart_timegm>('timegm');
    return _timegm(
      arg0,
    );
  }

  _dart_timegm _timegm;

  int nanosleep(
    ffi.Pointer<timespec> __rqtp,
    ffi.Pointer<timespec> __rmtp,
  ) {
    _nanosleep ??=
        _dylib.lookupFunction<_c_nanosleep, _dart_nanosleep>('nanosleep');
    return _nanosleep(
      __rqtp,
      __rmtp,
    );
  }

  _dart_nanosleep _nanosleep;

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    _clock_getres ??= _dylib
        .lookupFunction<_c_clock_getres, _dart_clock_getres>('clock_getres');
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  _dart_clock_getres _clock_getres;

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    _clock_gettime ??= _dylib
        .lookupFunction<_c_clock_gettime, _dart_clock_gettime>('clock_gettime');
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  _dart_clock_gettime _clock_gettime;

  int clock_gettime_nsec_np(
    int __clock_id,
  ) {
    _clock_gettime_nsec_np ??= _dylib.lookupFunction<_c_clock_gettime_nsec_np,
        _dart_clock_gettime_nsec_np>('clock_gettime_nsec_np');
    return _clock_gettime_nsec_np(
      __clock_id,
    );
  }

  _dart_clock_gettime_nsec_np _clock_gettime_nsec_np;

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    _clock_settime ??= _dylib
        .lookupFunction<_c_clock_settime, _dart_clock_settime>('clock_settime');
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  _dart_clock_settime _clock_settime;

  int timespec_get(
    ffi.Pointer<timespec> ts,
    int base,
  ) {
    _timespec_get ??= _dylib
        .lookupFunction<_c_timespec_get, _dart_timespec_get>('timespec_get');
    return _timespec_get(
      ts,
      base,
    );
  }

  _dart_timespec_get _timespec_get;

  int qos_class_self() {
    _qos_class_self ??=
        _dylib.lookupFunction<_c_qos_class_self, _dart_qos_class_self>(
            'qos_class_self');
    return _qos_class_self();
  }

  _dart_qos_class_self _qos_class_self;

  int qos_class_main() {
    _qos_class_main ??=
        _dylib.lookupFunction<_c_qos_class_main, _dart_qos_class_main>(
            'qos_class_main');
    return _qos_class_main();
  }

  _dart_qos_class_main _qos_class_main;

  int pthread_attr_set_qos_class_np(
    ffi.Pointer<_opaque_pthread_attr_t> __attr,
    int __qos_class,
    int __relative_priority,
  ) {
    _pthread_attr_set_qos_class_np ??= _dylib.lookupFunction<
        _c_pthread_attr_set_qos_class_np,
        _dart_pthread_attr_set_qos_class_np>('pthread_attr_set_qos_class_np');
    return _pthread_attr_set_qos_class_np(
      __attr,
      __qos_class,
      __relative_priority,
    );
  }

  _dart_pthread_attr_set_qos_class_np _pthread_attr_set_qos_class_np;

  int pthread_attr_get_qos_class_np(
    ffi.Pointer<_opaque_pthread_attr_t> __attr,
    ffi.Pointer<ffi.Uint32> __qos_class,
    ffi.Pointer<ffi.Int32> __relative_priority,
  ) {
    _pthread_attr_get_qos_class_np ??= _dylib.lookupFunction<
        _c_pthread_attr_get_qos_class_np,
        _dart_pthread_attr_get_qos_class_np>('pthread_attr_get_qos_class_np');
    return _pthread_attr_get_qos_class_np(
      __attr,
      __qos_class,
      __relative_priority,
    );
  }

  _dart_pthread_attr_get_qos_class_np _pthread_attr_get_qos_class_np;

  int pthread_set_qos_class_self_np(
    int __qos_class,
    int __relative_priority,
  ) {
    _pthread_set_qos_class_self_np ??= _dylib.lookupFunction<
        _c_pthread_set_qos_class_self_np,
        _dart_pthread_set_qos_class_self_np>('pthread_set_qos_class_self_np');
    return _pthread_set_qos_class_self_np(
      __qos_class,
      __relative_priority,
    );
  }

  _dart_pthread_set_qos_class_self_np _pthread_set_qos_class_self_np;

  int pthread_get_qos_class_np(
    ffi.Pointer<_opaque_pthread_t> __pthread,
    ffi.Pointer<ffi.Uint32> __qos_class,
    ffi.Pointer<ffi.Int32> __relative_priority,
  ) {
    _pthread_get_qos_class_np ??= _dylib.lookupFunction<
        _c_pthread_get_qos_class_np,
        _dart_pthread_get_qos_class_np>('pthread_get_qos_class_np');
    return _pthread_get_qos_class_np(
      __pthread,
      __qos_class,
      __relative_priority,
    );
  }

  _dart_pthread_get_qos_class_np _pthread_get_qos_class_np;

  ffi.Pointer<pthread_override_s> pthread_override_qos_class_start_np(
    ffi.Pointer<_opaque_pthread_t> __pthread,
    int __qos_class,
    int __relative_priority,
  ) {
    _pthread_override_qos_class_start_np ??= _dylib.lookupFunction<
            _c_pthread_override_qos_class_start_np,
            _dart_pthread_override_qos_class_start_np>(
        'pthread_override_qos_class_start_np');
    return _pthread_override_qos_class_start_np(
      __pthread,
      __qos_class,
      __relative_priority,
    );
  }

  _dart_pthread_override_qos_class_start_np
      _pthread_override_qos_class_start_np;

  int pthread_override_qos_class_end_np(
    ffi.Pointer<pthread_override_s> __override,
  ) {
    _pthread_override_qos_class_end_np ??= _dylib.lookupFunction<
            _c_pthread_override_qos_class_end_np,
            _dart_pthread_override_qos_class_end_np>(
        'pthread_override_qos_class_end_np');
    return _pthread_override_qos_class_end_np(
      __override,
    );
  }

  _dart_pthread_override_qos_class_end_np _pthread_override_qos_class_end_np;

  int pthread_atfork(
    ffi.Pointer<ffi.NativeFunction<_typedefC_2>> arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_3>> arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_4>> arg2,
  ) {
    _pthread_atfork ??=
        _dylib.lookupFunction<_c_pthread_atfork, _dart_pthread_atfork>(
            'pthread_atfork');
    return _pthread_atfork(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_atfork _pthread_atfork;

  int pthread_attr_destroy(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ) {
    _pthread_attr_destroy ??= _dylib.lookupFunction<_c_pthread_attr_destroy,
        _dart_pthread_attr_destroy>('pthread_attr_destroy');
    return _pthread_attr_destroy(
      arg0,
    );
  }

  _dart_pthread_attr_destroy _pthread_attr_destroy;

  int pthread_attr_getdetachstate(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_attr_getdetachstate ??= _dylib.lookupFunction<
        _c_pthread_attr_getdetachstate,
        _dart_pthread_attr_getdetachstate>('pthread_attr_getdetachstate');
    return _pthread_attr_getdetachstate(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_getdetachstate _pthread_attr_getdetachstate;

  int pthread_attr_getguardsize(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
  ) {
    _pthread_attr_getguardsize ??= _dylib.lookupFunction<
        _c_pthread_attr_getguardsize,
        _dart_pthread_attr_getguardsize>('pthread_attr_getguardsize');
    return _pthread_attr_getguardsize(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_getguardsize _pthread_attr_getguardsize;

  int pthread_attr_getinheritsched(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_attr_getinheritsched ??= _dylib.lookupFunction<
        _c_pthread_attr_getinheritsched,
        _dart_pthread_attr_getinheritsched>('pthread_attr_getinheritsched');
    return _pthread_attr_getinheritsched(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_getinheritsched _pthread_attr_getinheritsched;

  int pthread_attr_getschedparam(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<sched_param> arg1,
  ) {
    _pthread_attr_getschedparam ??= _dylib.lookupFunction<
        _c_pthread_attr_getschedparam,
        _dart_pthread_attr_getschedparam>('pthread_attr_getschedparam');
    return _pthread_attr_getschedparam(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_getschedparam _pthread_attr_getschedparam;

  int pthread_attr_getschedpolicy(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_attr_getschedpolicy ??= _dylib.lookupFunction<
        _c_pthread_attr_getschedpolicy,
        _dart_pthread_attr_getschedpolicy>('pthread_attr_getschedpolicy');
    return _pthread_attr_getschedpolicy(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_getschedpolicy _pthread_attr_getschedpolicy;

  int pthread_attr_getscope(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_attr_getscope ??= _dylib.lookupFunction<_c_pthread_attr_getscope,
        _dart_pthread_attr_getscope>('pthread_attr_getscope');
    return _pthread_attr_getscope(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_getscope _pthread_attr_getscope;

  int pthread_attr_getstack(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    _pthread_attr_getstack ??= _dylib.lookupFunction<_c_pthread_attr_getstack,
        _dart_pthread_attr_getstack>('pthread_attr_getstack');
    return _pthread_attr_getstack(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_attr_getstack _pthread_attr_getstack;

  int pthread_attr_getstackaddr(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ) {
    _pthread_attr_getstackaddr ??= _dylib.lookupFunction<
        _c_pthread_attr_getstackaddr,
        _dart_pthread_attr_getstackaddr>('pthread_attr_getstackaddr');
    return _pthread_attr_getstackaddr(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_getstackaddr _pthread_attr_getstackaddr;

  int pthread_attr_getstacksize(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
  ) {
    _pthread_attr_getstacksize ??= _dylib.lookupFunction<
        _c_pthread_attr_getstacksize,
        _dart_pthread_attr_getstacksize>('pthread_attr_getstacksize');
    return _pthread_attr_getstacksize(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_getstacksize _pthread_attr_getstacksize;

  int pthread_attr_init(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ) {
    _pthread_attr_init ??=
        _dylib.lookupFunction<_c_pthread_attr_init, _dart_pthread_attr_init>(
            'pthread_attr_init');
    return _pthread_attr_init(
      arg0,
    );
  }

  _dart_pthread_attr_init _pthread_attr_init;

  int pthread_attr_setdetachstate(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    int arg1,
  ) {
    _pthread_attr_setdetachstate ??= _dylib.lookupFunction<
        _c_pthread_attr_setdetachstate,
        _dart_pthread_attr_setdetachstate>('pthread_attr_setdetachstate');
    return _pthread_attr_setdetachstate(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_setdetachstate _pthread_attr_setdetachstate;

  int pthread_attr_setguardsize(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    int arg1,
  ) {
    _pthread_attr_setguardsize ??= _dylib.lookupFunction<
        _c_pthread_attr_setguardsize,
        _dart_pthread_attr_setguardsize>('pthread_attr_setguardsize');
    return _pthread_attr_setguardsize(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_setguardsize _pthread_attr_setguardsize;

  int pthread_attr_setinheritsched(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    int arg1,
  ) {
    _pthread_attr_setinheritsched ??= _dylib.lookupFunction<
        _c_pthread_attr_setinheritsched,
        _dart_pthread_attr_setinheritsched>('pthread_attr_setinheritsched');
    return _pthread_attr_setinheritsched(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_setinheritsched _pthread_attr_setinheritsched;

  int pthread_attr_setschedparam(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<sched_param> arg1,
  ) {
    _pthread_attr_setschedparam ??= _dylib.lookupFunction<
        _c_pthread_attr_setschedparam,
        _dart_pthread_attr_setschedparam>('pthread_attr_setschedparam');
    return _pthread_attr_setschedparam(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_setschedparam _pthread_attr_setschedparam;

  int pthread_attr_setschedpolicy(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    int arg1,
  ) {
    _pthread_attr_setschedpolicy ??= _dylib.lookupFunction<
        _c_pthread_attr_setschedpolicy,
        _dart_pthread_attr_setschedpolicy>('pthread_attr_setschedpolicy');
    return _pthread_attr_setschedpolicy(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_setschedpolicy _pthread_attr_setschedpolicy;

  int pthread_attr_setscope(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    int arg1,
  ) {
    _pthread_attr_setscope ??= _dylib.lookupFunction<_c_pthread_attr_setscope,
        _dart_pthread_attr_setscope>('pthread_attr_setscope');
    return _pthread_attr_setscope(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_setscope _pthread_attr_setscope;

  int pthread_attr_setstack(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    _pthread_attr_setstack ??= _dylib.lookupFunction<_c_pthread_attr_setstack,
        _dart_pthread_attr_setstack>('pthread_attr_setstack');
    return _pthread_attr_setstack(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_attr_setstack _pthread_attr_setstack;

  int pthread_attr_setstackaddr(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    _pthread_attr_setstackaddr ??= _dylib.lookupFunction<
        _c_pthread_attr_setstackaddr,
        _dart_pthread_attr_setstackaddr>('pthread_attr_setstackaddr');
    return _pthread_attr_setstackaddr(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_setstackaddr _pthread_attr_setstackaddr;

  int pthread_attr_setstacksize(
    ffi.Pointer<_opaque_pthread_attr_t> arg0,
    int arg1,
  ) {
    _pthread_attr_setstacksize ??= _dylib.lookupFunction<
        _c_pthread_attr_setstacksize,
        _dart_pthread_attr_setstacksize>('pthread_attr_setstacksize');
    return _pthread_attr_setstacksize(
      arg0,
      arg1,
    );
  }

  _dart_pthread_attr_setstacksize _pthread_attr_setstacksize;

  int pthread_cancel(
    ffi.Pointer<_opaque_pthread_t> arg0,
  ) {
    _pthread_cancel ??=
        _dylib.lookupFunction<_c_pthread_cancel, _dart_pthread_cancel>(
            'pthread_cancel');
    return _pthread_cancel(
      arg0,
    );
  }

  _dart_pthread_cancel _pthread_cancel;

  int pthread_cond_broadcast(
    ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ) {
    _pthread_cond_broadcast ??= _dylib.lookupFunction<_c_pthread_cond_broadcast,
        _dart_pthread_cond_broadcast>('pthread_cond_broadcast');
    return _pthread_cond_broadcast(
      arg0,
    );
  }

  _dart_pthread_cond_broadcast _pthread_cond_broadcast;

  int pthread_cond_destroy(
    ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ) {
    _pthread_cond_destroy ??= _dylib.lookupFunction<_c_pthread_cond_destroy,
        _dart_pthread_cond_destroy>('pthread_cond_destroy');
    return _pthread_cond_destroy(
      arg0,
    );
  }

  _dart_pthread_cond_destroy _pthread_cond_destroy;

  int pthread_cond_init(
    ffi.Pointer<_opaque_pthread_cond_t> arg0,
    ffi.Pointer<_opaque_pthread_condattr_t> arg1,
  ) {
    _pthread_cond_init ??=
        _dylib.lookupFunction<_c_pthread_cond_init, _dart_pthread_cond_init>(
            'pthread_cond_init');
    return _pthread_cond_init(
      arg0,
      arg1,
    );
  }

  _dart_pthread_cond_init _pthread_cond_init;

  int pthread_cond_signal(
    ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ) {
    _pthread_cond_signal ??= _dylib.lookupFunction<_c_pthread_cond_signal,
        _dart_pthread_cond_signal>('pthread_cond_signal');
    return _pthread_cond_signal(
      arg0,
    );
  }

  _dart_pthread_cond_signal _pthread_cond_signal;

  int pthread_cond_timedwait(
    ffi.Pointer<_opaque_pthread_cond_t> arg0,
    ffi.Pointer<_opaque_pthread_mutex_t> arg1,
    ffi.Pointer<timespec> arg2,
  ) {
    _pthread_cond_timedwait ??= _dylib.lookupFunction<_c_pthread_cond_timedwait,
        _dart_pthread_cond_timedwait>('pthread_cond_timedwait');
    return _pthread_cond_timedwait(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_cond_timedwait _pthread_cond_timedwait;

  int pthread_cond_wait(
    ffi.Pointer<_opaque_pthread_cond_t> arg0,
    ffi.Pointer<_opaque_pthread_mutex_t> arg1,
  ) {
    _pthread_cond_wait ??=
        _dylib.lookupFunction<_c_pthread_cond_wait, _dart_pthread_cond_wait>(
            'pthread_cond_wait');
    return _pthread_cond_wait(
      arg0,
      arg1,
    );
  }

  _dart_pthread_cond_wait _pthread_cond_wait;

  int pthread_condattr_destroy(
    ffi.Pointer<_opaque_pthread_condattr_t> arg0,
  ) {
    _pthread_condattr_destroy ??= _dylib.lookupFunction<
        _c_pthread_condattr_destroy,
        _dart_pthread_condattr_destroy>('pthread_condattr_destroy');
    return _pthread_condattr_destroy(
      arg0,
    );
  }

  _dart_pthread_condattr_destroy _pthread_condattr_destroy;

  int pthread_condattr_init(
    ffi.Pointer<_opaque_pthread_condattr_t> arg0,
  ) {
    _pthread_condattr_init ??= _dylib.lookupFunction<_c_pthread_condattr_init,
        _dart_pthread_condattr_init>('pthread_condattr_init');
    return _pthread_condattr_init(
      arg0,
    );
  }

  _dart_pthread_condattr_init _pthread_condattr_init;

  int pthread_condattr_getpshared(
    ffi.Pointer<_opaque_pthread_condattr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_condattr_getpshared ??= _dylib.lookupFunction<
        _c_pthread_condattr_getpshared,
        _dart_pthread_condattr_getpshared>('pthread_condattr_getpshared');
    return _pthread_condattr_getpshared(
      arg0,
      arg1,
    );
  }

  _dart_pthread_condattr_getpshared _pthread_condattr_getpshared;

  int pthread_condattr_setpshared(
    ffi.Pointer<_opaque_pthread_condattr_t> arg0,
    int arg1,
  ) {
    _pthread_condattr_setpshared ??= _dylib.lookupFunction<
        _c_pthread_condattr_setpshared,
        _dart_pthread_condattr_setpshared>('pthread_condattr_setpshared');
    return _pthread_condattr_setpshared(
      arg0,
      arg1,
    );
  }

  _dart_pthread_condattr_setpshared _pthread_condattr_setpshared;

  int pthread_create(
    ffi.Pointer<ffi.Pointer<_opaque_pthread_t>> arg0,
    ffi.Pointer<_opaque_pthread_attr_t> arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    _pthread_create ??=
        _dylib.lookupFunction<_c_pthread_create, _dart_pthread_create>(
            'pthread_create');
    return _pthread_create(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_pthread_create _pthread_create;

  int pthread_detach(
    ffi.Pointer<_opaque_pthread_t> arg0,
  ) {
    _pthread_detach ??=
        _dylib.lookupFunction<_c_pthread_detach, _dart_pthread_detach>(
            'pthread_detach');
    return _pthread_detach(
      arg0,
    );
  }

  _dart_pthread_detach _pthread_detach;

  int pthread_equal(
    ffi.Pointer<_opaque_pthread_t> arg0,
    ffi.Pointer<_opaque_pthread_t> arg1,
  ) {
    _pthread_equal ??= _dylib
        .lookupFunction<_c_pthread_equal, _dart_pthread_equal>('pthread_equal');
    return _pthread_equal(
      arg0,
      arg1,
    );
  }

  _dart_pthread_equal _pthread_equal;

  void pthread_exit(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _pthread_exit ??= _dylib
        .lookupFunction<_c_pthread_exit, _dart_pthread_exit>('pthread_exit');
    return _pthread_exit(
      arg0,
    );
  }

  _dart_pthread_exit _pthread_exit;

  int pthread_getconcurrency() {
    _pthread_getconcurrency ??= _dylib.lookupFunction<_c_pthread_getconcurrency,
        _dart_pthread_getconcurrency>('pthread_getconcurrency');
    return _pthread_getconcurrency();
  }

  _dart_pthread_getconcurrency _pthread_getconcurrency;

  int pthread_getschedparam(
    ffi.Pointer<_opaque_pthread_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<sched_param> arg2,
  ) {
    _pthread_getschedparam ??= _dylib.lookupFunction<_c_pthread_getschedparam,
        _dart_pthread_getschedparam>('pthread_getschedparam');
    return _pthread_getschedparam(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_getschedparam _pthread_getschedparam;

  ffi.Pointer<ffi.Void> pthread_getspecific(
    int arg0,
  ) {
    _pthread_getspecific ??= _dylib.lookupFunction<_c_pthread_getspecific,
        _dart_pthread_getspecific>('pthread_getspecific');
    return _pthread_getspecific(
      arg0,
    );
  }

  _dart_pthread_getspecific _pthread_getspecific;

  int pthread_join(
    ffi.Pointer<_opaque_pthread_t> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ) {
    _pthread_join ??= _dylib
        .lookupFunction<_c_pthread_join, _dart_pthread_join>('pthread_join');
    return _pthread_join(
      arg0,
      arg1,
    );
  }

  _dart_pthread_join _pthread_join;

  int pthread_key_create(
    ffi.Pointer<ffi.Uint64> arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg1,
  ) {
    _pthread_key_create ??=
        _dylib.lookupFunction<_c_pthread_key_create, _dart_pthread_key_create>(
            'pthread_key_create');
    return _pthread_key_create(
      arg0,
      arg1,
    );
  }

  _dart_pthread_key_create _pthread_key_create;

  int pthread_key_delete(
    int arg0,
  ) {
    _pthread_key_delete ??=
        _dylib.lookupFunction<_c_pthread_key_delete, _dart_pthread_key_delete>(
            'pthread_key_delete');
    return _pthread_key_delete(
      arg0,
    );
  }

  _dart_pthread_key_delete _pthread_key_delete;

  int pthread_mutex_destroy(
    ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ) {
    _pthread_mutex_destroy ??= _dylib.lookupFunction<_c_pthread_mutex_destroy,
        _dart_pthread_mutex_destroy>('pthread_mutex_destroy');
    return _pthread_mutex_destroy(
      arg0,
    );
  }

  _dart_pthread_mutex_destroy _pthread_mutex_destroy;

  int pthread_mutex_getprioceiling(
    ffi.Pointer<_opaque_pthread_mutex_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_mutex_getprioceiling ??= _dylib.lookupFunction<
        _c_pthread_mutex_getprioceiling,
        _dart_pthread_mutex_getprioceiling>('pthread_mutex_getprioceiling');
    return _pthread_mutex_getprioceiling(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutex_getprioceiling _pthread_mutex_getprioceiling;

  int pthread_mutex_init(
    ffi.Pointer<_opaque_pthread_mutex_t> arg0,
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg1,
  ) {
    _pthread_mutex_init ??=
        _dylib.lookupFunction<_c_pthread_mutex_init, _dart_pthread_mutex_init>(
            'pthread_mutex_init');
    return _pthread_mutex_init(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutex_init _pthread_mutex_init;

  int pthread_mutex_lock(
    ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ) {
    _pthread_mutex_lock ??=
        _dylib.lookupFunction<_c_pthread_mutex_lock, _dart_pthread_mutex_lock>(
            'pthread_mutex_lock');
    return _pthread_mutex_lock(
      arg0,
    );
  }

  _dart_pthread_mutex_lock _pthread_mutex_lock;

  int pthread_mutex_setprioceiling(
    ffi.Pointer<_opaque_pthread_mutex_t> arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _pthread_mutex_setprioceiling ??= _dylib.lookupFunction<
        _c_pthread_mutex_setprioceiling,
        _dart_pthread_mutex_setprioceiling>('pthread_mutex_setprioceiling');
    return _pthread_mutex_setprioceiling(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_mutex_setprioceiling _pthread_mutex_setprioceiling;

  int pthread_mutex_trylock(
    ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ) {
    _pthread_mutex_trylock ??= _dylib.lookupFunction<_c_pthread_mutex_trylock,
        _dart_pthread_mutex_trylock>('pthread_mutex_trylock');
    return _pthread_mutex_trylock(
      arg0,
    );
  }

  _dart_pthread_mutex_trylock _pthread_mutex_trylock;

  int pthread_mutex_unlock(
    ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ) {
    _pthread_mutex_unlock ??= _dylib.lookupFunction<_c_pthread_mutex_unlock,
        _dart_pthread_mutex_unlock>('pthread_mutex_unlock');
    return _pthread_mutex_unlock(
      arg0,
    );
  }

  _dart_pthread_mutex_unlock _pthread_mutex_unlock;

  int pthread_mutexattr_destroy(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ) {
    _pthread_mutexattr_destroy ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_destroy,
        _dart_pthread_mutexattr_destroy>('pthread_mutexattr_destroy');
    return _pthread_mutexattr_destroy(
      arg0,
    );
  }

  _dart_pthread_mutexattr_destroy _pthread_mutexattr_destroy;

  int pthread_mutexattr_getprioceiling(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_mutexattr_getprioceiling ??= _dylib.lookupFunction<
            _c_pthread_mutexattr_getprioceiling,
            _dart_pthread_mutexattr_getprioceiling>(
        'pthread_mutexattr_getprioceiling');
    return _pthread_mutexattr_getprioceiling(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_getprioceiling _pthread_mutexattr_getprioceiling;

  int pthread_mutexattr_getprotocol(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_mutexattr_getprotocol ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_getprotocol,
        _dart_pthread_mutexattr_getprotocol>('pthread_mutexattr_getprotocol');
    return _pthread_mutexattr_getprotocol(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_getprotocol _pthread_mutexattr_getprotocol;

  int pthread_mutexattr_getpshared(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_mutexattr_getpshared ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_getpshared,
        _dart_pthread_mutexattr_getpshared>('pthread_mutexattr_getpshared');
    return _pthread_mutexattr_getpshared(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_getpshared _pthread_mutexattr_getpshared;

  int pthread_mutexattr_gettype(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_mutexattr_gettype ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_gettype,
        _dart_pthread_mutexattr_gettype>('pthread_mutexattr_gettype');
    return _pthread_mutexattr_gettype(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_gettype _pthread_mutexattr_gettype;

  int pthread_mutexattr_getpolicy_np(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_mutexattr_getpolicy_np ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_getpolicy_np,
        _dart_pthread_mutexattr_getpolicy_np>('pthread_mutexattr_getpolicy_np');
    return _pthread_mutexattr_getpolicy_np(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_getpolicy_np _pthread_mutexattr_getpolicy_np;

  int pthread_mutexattr_init(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ) {
    _pthread_mutexattr_init ??= _dylib.lookupFunction<_c_pthread_mutexattr_init,
        _dart_pthread_mutexattr_init>('pthread_mutexattr_init');
    return _pthread_mutexattr_init(
      arg0,
    );
  }

  _dart_pthread_mutexattr_init _pthread_mutexattr_init;

  int pthread_mutexattr_setprioceiling(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    _pthread_mutexattr_setprioceiling ??= _dylib.lookupFunction<
            _c_pthread_mutexattr_setprioceiling,
            _dart_pthread_mutexattr_setprioceiling>(
        'pthread_mutexattr_setprioceiling');
    return _pthread_mutexattr_setprioceiling(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_setprioceiling _pthread_mutexattr_setprioceiling;

  int pthread_mutexattr_setprotocol(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    _pthread_mutexattr_setprotocol ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_setprotocol,
        _dart_pthread_mutexattr_setprotocol>('pthread_mutexattr_setprotocol');
    return _pthread_mutexattr_setprotocol(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_setprotocol _pthread_mutexattr_setprotocol;

  int pthread_mutexattr_setpshared(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    _pthread_mutexattr_setpshared ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_setpshared,
        _dart_pthread_mutexattr_setpshared>('pthread_mutexattr_setpshared');
    return _pthread_mutexattr_setpshared(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_setpshared _pthread_mutexattr_setpshared;

  int pthread_mutexattr_settype(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    _pthread_mutexattr_settype ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_settype,
        _dart_pthread_mutexattr_settype>('pthread_mutexattr_settype');
    return _pthread_mutexattr_settype(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_settype _pthread_mutexattr_settype;

  int pthread_mutexattr_setpolicy_np(
    ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
    int arg1,
  ) {
    _pthread_mutexattr_setpolicy_np ??= _dylib.lookupFunction<
        _c_pthread_mutexattr_setpolicy_np,
        _dart_pthread_mutexattr_setpolicy_np>('pthread_mutexattr_setpolicy_np');
    return _pthread_mutexattr_setpolicy_np(
      arg0,
      arg1,
    );
  }

  _dart_pthread_mutexattr_setpolicy_np _pthread_mutexattr_setpolicy_np;

  int pthread_once(
    ffi.Pointer<_opaque_pthread_once_t> arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_7>> arg1,
  ) {
    _pthread_once ??= _dylib
        .lookupFunction<_c_pthread_once, _dart_pthread_once>('pthread_once');
    return _pthread_once(
      arg0,
      arg1,
    );
  }

  _dart_pthread_once _pthread_once;

  int pthread_rwlock_destroy(
    ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
  ) {
    _pthread_rwlock_destroy ??= _dylib.lookupFunction<_c_pthread_rwlock_destroy,
        _dart_pthread_rwlock_destroy>('pthread_rwlock_destroy');
    return _pthread_rwlock_destroy(
      arg0,
    );
  }

  _dart_pthread_rwlock_destroy _pthread_rwlock_destroy;

  int pthread_rwlock_init(
    ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
    ffi.Pointer<_opaque_pthread_rwlockattr_t> arg1,
  ) {
    _pthread_rwlock_init ??= _dylib.lookupFunction<_c_pthread_rwlock_init,
        _dart_pthread_rwlock_init>('pthread_rwlock_init');
    return _pthread_rwlock_init(
      arg0,
      arg1,
    );
  }

  _dart_pthread_rwlock_init _pthread_rwlock_init;

  int pthread_rwlock_rdlock(
    ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
  ) {
    _pthread_rwlock_rdlock ??= _dylib.lookupFunction<_c_pthread_rwlock_rdlock,
        _dart_pthread_rwlock_rdlock>('pthread_rwlock_rdlock');
    return _pthread_rwlock_rdlock(
      arg0,
    );
  }

  _dart_pthread_rwlock_rdlock _pthread_rwlock_rdlock;

  int pthread_rwlock_tryrdlock(
    ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
  ) {
    _pthread_rwlock_tryrdlock ??= _dylib.lookupFunction<
        _c_pthread_rwlock_tryrdlock,
        _dart_pthread_rwlock_tryrdlock>('pthread_rwlock_tryrdlock');
    return _pthread_rwlock_tryrdlock(
      arg0,
    );
  }

  _dart_pthread_rwlock_tryrdlock _pthread_rwlock_tryrdlock;

  int pthread_rwlock_trywrlock(
    ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
  ) {
    _pthread_rwlock_trywrlock ??= _dylib.lookupFunction<
        _c_pthread_rwlock_trywrlock,
        _dart_pthread_rwlock_trywrlock>('pthread_rwlock_trywrlock');
    return _pthread_rwlock_trywrlock(
      arg0,
    );
  }

  _dart_pthread_rwlock_trywrlock _pthread_rwlock_trywrlock;

  int pthread_rwlock_wrlock(
    ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
  ) {
    _pthread_rwlock_wrlock ??= _dylib.lookupFunction<_c_pthread_rwlock_wrlock,
        _dart_pthread_rwlock_wrlock>('pthread_rwlock_wrlock');
    return _pthread_rwlock_wrlock(
      arg0,
    );
  }

  _dart_pthread_rwlock_wrlock _pthread_rwlock_wrlock;

  int pthread_rwlock_unlock(
    ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
  ) {
    _pthread_rwlock_unlock ??= _dylib.lookupFunction<_c_pthread_rwlock_unlock,
        _dart_pthread_rwlock_unlock>('pthread_rwlock_unlock');
    return _pthread_rwlock_unlock(
      arg0,
    );
  }

  _dart_pthread_rwlock_unlock _pthread_rwlock_unlock;

  int pthread_rwlockattr_destroy(
    ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
  ) {
    _pthread_rwlockattr_destroy ??= _dylib.lookupFunction<
        _c_pthread_rwlockattr_destroy,
        _dart_pthread_rwlockattr_destroy>('pthread_rwlockattr_destroy');
    return _pthread_rwlockattr_destroy(
      arg0,
    );
  }

  _dart_pthread_rwlockattr_destroy _pthread_rwlockattr_destroy;

  int pthread_rwlockattr_getpshared(
    ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_rwlockattr_getpshared ??= _dylib.lookupFunction<
        _c_pthread_rwlockattr_getpshared,
        _dart_pthread_rwlockattr_getpshared>('pthread_rwlockattr_getpshared');
    return _pthread_rwlockattr_getpshared(
      arg0,
      arg1,
    );
  }

  _dart_pthread_rwlockattr_getpshared _pthread_rwlockattr_getpshared;

  int pthread_rwlockattr_init(
    ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
  ) {
    _pthread_rwlockattr_init ??= _dylib.lookupFunction<
        _c_pthread_rwlockattr_init,
        _dart_pthread_rwlockattr_init>('pthread_rwlockattr_init');
    return _pthread_rwlockattr_init(
      arg0,
    );
  }

  _dart_pthread_rwlockattr_init _pthread_rwlockattr_init;

  int pthread_rwlockattr_setpshared(
    ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
    int arg1,
  ) {
    _pthread_rwlockattr_setpshared ??= _dylib.lookupFunction<
        _c_pthread_rwlockattr_setpshared,
        _dart_pthread_rwlockattr_setpshared>('pthread_rwlockattr_setpshared');
    return _pthread_rwlockattr_setpshared(
      arg0,
      arg1,
    );
  }

  _dart_pthread_rwlockattr_setpshared _pthread_rwlockattr_setpshared;

  ffi.Pointer<_opaque_pthread_t> pthread_self() {
    _pthread_self ??= _dylib
        .lookupFunction<_c_pthread_self, _dart_pthread_self>('pthread_self');
    return _pthread_self();
  }

  _dart_pthread_self _pthread_self;

  int pthread_setcancelstate(
    int arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_setcancelstate ??= _dylib.lookupFunction<_c_pthread_setcancelstate,
        _dart_pthread_setcancelstate>('pthread_setcancelstate');
    return _pthread_setcancelstate(
      arg0,
      arg1,
    );
  }

  _dart_pthread_setcancelstate _pthread_setcancelstate;

  int pthread_setcanceltype(
    int arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _pthread_setcanceltype ??= _dylib.lookupFunction<_c_pthread_setcanceltype,
        _dart_pthread_setcanceltype>('pthread_setcanceltype');
    return _pthread_setcanceltype(
      arg0,
      arg1,
    );
  }

  _dart_pthread_setcanceltype _pthread_setcanceltype;

  int pthread_setconcurrency(
    int arg0,
  ) {
    _pthread_setconcurrency ??= _dylib.lookupFunction<_c_pthread_setconcurrency,
        _dart_pthread_setconcurrency>('pthread_setconcurrency');
    return _pthread_setconcurrency(
      arg0,
    );
  }

  _dart_pthread_setconcurrency _pthread_setconcurrency;

  int pthread_setschedparam(
    ffi.Pointer<_opaque_pthread_t> arg0,
    int arg1,
    ffi.Pointer<sched_param> arg2,
  ) {
    _pthread_setschedparam ??= _dylib.lookupFunction<_c_pthread_setschedparam,
        _dart_pthread_setschedparam>('pthread_setschedparam');
    return _pthread_setschedparam(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_setschedparam _pthread_setschedparam;

  int pthread_setspecific(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    _pthread_setspecific ??= _dylib.lookupFunction<_c_pthread_setspecific,
        _dart_pthread_setspecific>('pthread_setspecific');
    return _pthread_setspecific(
      arg0,
      arg1,
    );
  }

  _dart_pthread_setspecific _pthread_setspecific;

  void pthread_testcancel() {
    _pthread_testcancel ??=
        _dylib.lookupFunction<_c_pthread_testcancel, _dart_pthread_testcancel>(
            'pthread_testcancel');
    return _pthread_testcancel();
  }

  _dart_pthread_testcancel _pthread_testcancel;

  int pthread_is_threaded_np() {
    _pthread_is_threaded_np ??= _dylib.lookupFunction<_c_pthread_is_threaded_np,
        _dart_pthread_is_threaded_np>('pthread_is_threaded_np');
    return _pthread_is_threaded_np();
  }

  _dart_pthread_is_threaded_np _pthread_is_threaded_np;

  int pthread_threadid_np(
    ffi.Pointer<_opaque_pthread_t> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
  ) {
    _pthread_threadid_np ??= _dylib.lookupFunction<_c_pthread_threadid_np,
        _dart_pthread_threadid_np>('pthread_threadid_np');
    return _pthread_threadid_np(
      arg0,
      arg1,
    );
  }

  _dart_pthread_threadid_np _pthread_threadid_np;

  int pthread_getname_np(
    ffi.Pointer<_opaque_pthread_t> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _pthread_getname_np ??=
        _dylib.lookupFunction<_c_pthread_getname_np, _dart_pthread_getname_np>(
            'pthread_getname_np');
    return _pthread_getname_np(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_getname_np _pthread_getname_np;

  int pthread_setname_np(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _pthread_setname_np ??=
        _dylib.lookupFunction<_c_pthread_setname_np, _dart_pthread_setname_np>(
            'pthread_setname_np');
    return _pthread_setname_np(
      arg0,
    );
  }

  _dart_pthread_setname_np _pthread_setname_np;

  int pthread_main_np() {
    _pthread_main_np ??=
        _dylib.lookupFunction<_c_pthread_main_np, _dart_pthread_main_np>(
            'pthread_main_np');
    return _pthread_main_np();
  }

  _dart_pthread_main_np _pthread_main_np;

  int pthread_mach_thread_np(
    ffi.Pointer<_opaque_pthread_t> arg0,
  ) {
    _pthread_mach_thread_np ??= _dylib.lookupFunction<_c_pthread_mach_thread_np,
        _dart_pthread_mach_thread_np>('pthread_mach_thread_np');
    return _pthread_mach_thread_np(
      arg0,
    );
  }

  _dart_pthread_mach_thread_np _pthread_mach_thread_np;

  int pthread_get_stacksize_np(
    ffi.Pointer<_opaque_pthread_t> arg0,
  ) {
    _pthread_get_stacksize_np ??= _dylib.lookupFunction<
        _c_pthread_get_stacksize_np,
        _dart_pthread_get_stacksize_np>('pthread_get_stacksize_np');
    return _pthread_get_stacksize_np(
      arg0,
    );
  }

  _dart_pthread_get_stacksize_np _pthread_get_stacksize_np;

  ffi.Pointer<ffi.Void> pthread_get_stackaddr_np(
    ffi.Pointer<_opaque_pthread_t> arg0,
  ) {
    _pthread_get_stackaddr_np ??= _dylib.lookupFunction<
        _c_pthread_get_stackaddr_np,
        _dart_pthread_get_stackaddr_np>('pthread_get_stackaddr_np');
    return _pthread_get_stackaddr_np(
      arg0,
    );
  }

  _dart_pthread_get_stackaddr_np _pthread_get_stackaddr_np;

  int pthread_cond_signal_thread_np(
    ffi.Pointer<_opaque_pthread_cond_t> arg0,
    ffi.Pointer<_opaque_pthread_t> arg1,
  ) {
    _pthread_cond_signal_thread_np ??= _dylib.lookupFunction<
        _c_pthread_cond_signal_thread_np,
        _dart_pthread_cond_signal_thread_np>('pthread_cond_signal_thread_np');
    return _pthread_cond_signal_thread_np(
      arg0,
      arg1,
    );
  }

  _dart_pthread_cond_signal_thread_np _pthread_cond_signal_thread_np;

  int pthread_cond_timedwait_relative_np(
    ffi.Pointer<_opaque_pthread_cond_t> arg0,
    ffi.Pointer<_opaque_pthread_mutex_t> arg1,
    ffi.Pointer<timespec> arg2,
  ) {
    _pthread_cond_timedwait_relative_np ??= _dylib.lookupFunction<
            _c_pthread_cond_timedwait_relative_np,
            _dart_pthread_cond_timedwait_relative_np>(
        'pthread_cond_timedwait_relative_np');
    return _pthread_cond_timedwait_relative_np(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_cond_timedwait_relative_np _pthread_cond_timedwait_relative_np;

  int pthread_create_suspended_np(
    ffi.Pointer<ffi.Pointer<_opaque_pthread_t>> arg0,
    ffi.Pointer<_opaque_pthread_attr_t> arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_8>> arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    _pthread_create_suspended_np ??= _dylib.lookupFunction<
        _c_pthread_create_suspended_np,
        _dart_pthread_create_suspended_np>('pthread_create_suspended_np');
    return _pthread_create_suspended_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_pthread_create_suspended_np _pthread_create_suspended_np;

  int pthread_kill(
    ffi.Pointer<_opaque_pthread_t> arg0,
    int arg1,
  ) {
    _pthread_kill ??= _dylib
        .lookupFunction<_c_pthread_kill, _dart_pthread_kill>('pthread_kill');
    return _pthread_kill(
      arg0,
      arg1,
    );
  }

  _dart_pthread_kill _pthread_kill;

  ffi.Pointer<_opaque_pthread_t> pthread_from_mach_thread_np(
    int arg0,
  ) {
    _pthread_from_mach_thread_np ??= _dylib.lookupFunction<
        _c_pthread_from_mach_thread_np,
        _dart_pthread_from_mach_thread_np>('pthread_from_mach_thread_np');
    return _pthread_from_mach_thread_np(
      arg0,
    );
  }

  _dart_pthread_from_mach_thread_np _pthread_from_mach_thread_np;

  int pthread_sigmask(
    int arg0,
    ffi.Pointer<ffi.Uint32> arg1,
    ffi.Pointer<ffi.Uint32> arg2,
  ) {
    _pthread_sigmask ??=
        _dylib.lookupFunction<_c_pthread_sigmask, _dart_pthread_sigmask>(
            'pthread_sigmask');
    return _pthread_sigmask(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_sigmask _pthread_sigmask;

  void pthread_yield_np() {
    _pthread_yield_np ??=
        _dylib.lookupFunction<_c_pthread_yield_np, _dart_pthread_yield_np>(
            'pthread_yield_np');
    return _pthread_yield_np();
  }

  _dart_pthread_yield_np _pthread_yield_np;

  int gpioInitialise() {
    _gpioInitialise ??=
        _dylib.lookupFunction<_c_gpioInitialise, _dart_gpioInitialise>(
            'gpioInitialise');
    return _gpioInitialise();
  }

  _dart_gpioInitialise _gpioInitialise;

  void gpioTerminate() {
    _gpioTerminate ??= _dylib
        .lookupFunction<_c_gpioTerminate, _dart_gpioTerminate>('gpioTerminate');
    return _gpioTerminate();
  }

  _dart_gpioTerminate _gpioTerminate;

  int gpioSetMode(
    int gpio,
    int mode,
  ) {
    _gpioSetMode ??=
        _dylib.lookupFunction<_c_gpioSetMode, _dart_gpioSetMode>('gpioSetMode');
    return _gpioSetMode(
      gpio,
      mode,
    );
  }

  _dart_gpioSetMode _gpioSetMode;

  int gpioGetMode(
    int gpio,
  ) {
    _gpioGetMode ??=
        _dylib.lookupFunction<_c_gpioGetMode, _dart_gpioGetMode>('gpioGetMode');
    return _gpioGetMode(
      gpio,
    );
  }

  _dart_gpioGetMode _gpioGetMode;

  int gpioSetPullUpDown(
    int gpio,
    int pud,
  ) {
    _gpioSetPullUpDown ??=
        _dylib.lookupFunction<_c_gpioSetPullUpDown, _dart_gpioSetPullUpDown>(
            'gpioSetPullUpDown');
    return _gpioSetPullUpDown(
      gpio,
      pud,
    );
  }

  _dart_gpioSetPullUpDown _gpioSetPullUpDown;

  int gpioRead(
    int gpio,
  ) {
    _gpioRead ??=
        _dylib.lookupFunction<_c_gpioRead, _dart_gpioRead>('gpioRead');
    return _gpioRead(
      gpio,
    );
  }

  _dart_gpioRead _gpioRead;

  int gpioWrite(
    int gpio,
    int level,
  ) {
    _gpioWrite ??=
        _dylib.lookupFunction<_c_gpioWrite, _dart_gpioWrite>('gpioWrite');
    return _gpioWrite(
      gpio,
      level,
    );
  }

  _dart_gpioWrite _gpioWrite;

  int gpioPWM(
    int user_gpio,
    int dutycycle,
  ) {
    _gpioPWM ??= _dylib.lookupFunction<_c_gpioPWM, _dart_gpioPWM>('gpioPWM');
    return _gpioPWM(
      user_gpio,
      dutycycle,
    );
  }

  _dart_gpioPWM _gpioPWM;

  int gpioGetPWMdutycycle(
    int user_gpio,
  ) {
    _gpioGetPWMdutycycle ??= _dylib.lookupFunction<_c_gpioGetPWMdutycycle,
        _dart_gpioGetPWMdutycycle>('gpioGetPWMdutycycle');
    return _gpioGetPWMdutycycle(
      user_gpio,
    );
  }

  _dart_gpioGetPWMdutycycle _gpioGetPWMdutycycle;

  int gpioSetPWMrange(
    int user_gpio,
    int range,
  ) {
    _gpioSetPWMrange ??=
        _dylib.lookupFunction<_c_gpioSetPWMrange, _dart_gpioSetPWMrange>(
            'gpioSetPWMrange');
    return _gpioSetPWMrange(
      user_gpio,
      range,
    );
  }

  _dart_gpioSetPWMrange _gpioSetPWMrange;

  int gpioGetPWMrange(
    int user_gpio,
  ) {
    _gpioGetPWMrange ??=
        _dylib.lookupFunction<_c_gpioGetPWMrange, _dart_gpioGetPWMrange>(
            'gpioGetPWMrange');
    return _gpioGetPWMrange(
      user_gpio,
    );
  }

  _dart_gpioGetPWMrange _gpioGetPWMrange;

  int gpioGetPWMrealRange(
    int user_gpio,
  ) {
    _gpioGetPWMrealRange ??= _dylib.lookupFunction<_c_gpioGetPWMrealRange,
        _dart_gpioGetPWMrealRange>('gpioGetPWMrealRange');
    return _gpioGetPWMrealRange(
      user_gpio,
    );
  }

  _dart_gpioGetPWMrealRange _gpioGetPWMrealRange;

  int gpioSetPWMfrequency(
    int user_gpio,
    int frequency,
  ) {
    _gpioSetPWMfrequency ??= _dylib.lookupFunction<_c_gpioSetPWMfrequency,
        _dart_gpioSetPWMfrequency>('gpioSetPWMfrequency');
    return _gpioSetPWMfrequency(
      user_gpio,
      frequency,
    );
  }

  _dart_gpioSetPWMfrequency _gpioSetPWMfrequency;

  int gpioGetPWMfrequency(
    int user_gpio,
  ) {
    _gpioGetPWMfrequency ??= _dylib.lookupFunction<_c_gpioGetPWMfrequency,
        _dart_gpioGetPWMfrequency>('gpioGetPWMfrequency');
    return _gpioGetPWMfrequency(
      user_gpio,
    );
  }

  _dart_gpioGetPWMfrequency _gpioGetPWMfrequency;

  int gpioServo(
    int user_gpio,
    int pulsewidth,
  ) {
    _gpioServo ??=
        _dylib.lookupFunction<_c_gpioServo, _dart_gpioServo>('gpioServo');
    return _gpioServo(
      user_gpio,
      pulsewidth,
    );
  }

  _dart_gpioServo _gpioServo;

  int gpioGetServoPulsewidth(
    int user_gpio,
  ) {
    _gpioGetServoPulsewidth ??= _dylib.lookupFunction<_c_gpioGetServoPulsewidth,
        _dart_gpioGetServoPulsewidth>('gpioGetServoPulsewidth');
    return _gpioGetServoPulsewidth(
      user_gpio,
    );
  }

  _dart_gpioGetServoPulsewidth _gpioGetServoPulsewidth;

  int gpioSetAlertFunc(
    int user_gpio,
    ffi.Pointer<ffi.NativeFunction<gpioAlertFunc_t>> f,
  ) {
    _gpioSetAlertFunc ??=
        _dylib.lookupFunction<_c_gpioSetAlertFunc, _dart_gpioSetAlertFunc>(
            'gpioSetAlertFunc');
    return _gpioSetAlertFunc(
      user_gpio,
      f,
    );
  }

  _dart_gpioSetAlertFunc _gpioSetAlertFunc;

  int gpioSetAlertFuncEx(
    int user_gpio,
    ffi.Pointer<ffi.NativeFunction<gpioAlertFuncEx_t>> f,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _gpioSetAlertFuncEx ??=
        _dylib.lookupFunction<_c_gpioSetAlertFuncEx, _dart_gpioSetAlertFuncEx>(
            'gpioSetAlertFuncEx');
    return _gpioSetAlertFuncEx(
      user_gpio,
      f,
      userdata,
    );
  }

  _dart_gpioSetAlertFuncEx _gpioSetAlertFuncEx;

  int gpioSetISRFunc(
    int gpio,
    int edge,
    int timeout,
    ffi.Pointer<ffi.NativeFunction<gpioISRFunc_t>> f,
  ) {
    _gpioSetISRFunc ??=
        _dylib.lookupFunction<_c_gpioSetISRFunc, _dart_gpioSetISRFunc>(
            'gpioSetISRFunc');
    return _gpioSetISRFunc(
      gpio,
      edge,
      timeout,
      f,
    );
  }

  _dart_gpioSetISRFunc _gpioSetISRFunc;

  int gpioSetISRFuncEx(
    int gpio,
    int edge,
    int timeout,
    ffi.Pointer<ffi.NativeFunction<gpioISRFuncEx_t>> f,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _gpioSetISRFuncEx ??=
        _dylib.lookupFunction<_c_gpioSetISRFuncEx, _dart_gpioSetISRFuncEx>(
            'gpioSetISRFuncEx');
    return _gpioSetISRFuncEx(
      gpio,
      edge,
      timeout,
      f,
      userdata,
    );
  }

  _dart_gpioSetISRFuncEx _gpioSetISRFuncEx;

  int gpioNotifyOpen() {
    _gpioNotifyOpen ??=
        _dylib.lookupFunction<_c_gpioNotifyOpen, _dart_gpioNotifyOpen>(
            'gpioNotifyOpen');
    return _gpioNotifyOpen();
  }

  _dart_gpioNotifyOpen _gpioNotifyOpen;

  int gpioNotifyOpenWithSize(
    int bufSize,
  ) {
    _gpioNotifyOpenWithSize ??= _dylib.lookupFunction<_c_gpioNotifyOpenWithSize,
        _dart_gpioNotifyOpenWithSize>('gpioNotifyOpenWithSize');
    return _gpioNotifyOpenWithSize(
      bufSize,
    );
  }

  _dart_gpioNotifyOpenWithSize _gpioNotifyOpenWithSize;

  int gpioNotifyBegin(
    int handle,
    int bits,
  ) {
    _gpioNotifyBegin ??=
        _dylib.lookupFunction<_c_gpioNotifyBegin, _dart_gpioNotifyBegin>(
            'gpioNotifyBegin');
    return _gpioNotifyBegin(
      handle,
      bits,
    );
  }

  _dart_gpioNotifyBegin _gpioNotifyBegin;

  int gpioNotifyPause(
    int handle,
  ) {
    _gpioNotifyPause ??=
        _dylib.lookupFunction<_c_gpioNotifyPause, _dart_gpioNotifyPause>(
            'gpioNotifyPause');
    return _gpioNotifyPause(
      handle,
    );
  }

  _dart_gpioNotifyPause _gpioNotifyPause;

  int gpioNotifyClose(
    int handle,
  ) {
    _gpioNotifyClose ??=
        _dylib.lookupFunction<_c_gpioNotifyClose, _dart_gpioNotifyClose>(
            'gpioNotifyClose');
    return _gpioNotifyClose(
      handle,
    );
  }

  _dart_gpioNotifyClose _gpioNotifyClose;

  int gpioWaveClear() {
    _gpioWaveClear ??= _dylib
        .lookupFunction<_c_gpioWaveClear, _dart_gpioWaveClear>('gpioWaveClear');
    return _gpioWaveClear();
  }

  _dart_gpioWaveClear _gpioWaveClear;

  int gpioWaveAddNew() {
    _gpioWaveAddNew ??=
        _dylib.lookupFunction<_c_gpioWaveAddNew, _dart_gpioWaveAddNew>(
            'gpioWaveAddNew');
    return _gpioWaveAddNew();
  }

  _dart_gpioWaveAddNew _gpioWaveAddNew;

  int gpioWaveAddGeneric(
    int numPulses,
    ffi.Pointer<gpioPulse_t> pulses,
  ) {
    _gpioWaveAddGeneric ??=
        _dylib.lookupFunction<_c_gpioWaveAddGeneric, _dart_gpioWaveAddGeneric>(
            'gpioWaveAddGeneric');
    return _gpioWaveAddGeneric(
      numPulses,
      pulses,
    );
  }

  _dart_gpioWaveAddGeneric _gpioWaveAddGeneric;

  int gpioWaveAddSerial(
    int user_gpio,
    int baud,
    int data_bits,
    int stop_bits,
    int offset,
    int numBytes,
    ffi.Pointer<ffi.Int8> str,
  ) {
    _gpioWaveAddSerial ??=
        _dylib.lookupFunction<_c_gpioWaveAddSerial, _dart_gpioWaveAddSerial>(
            'gpioWaveAddSerial');
    return _gpioWaveAddSerial(
      user_gpio,
      baud,
      data_bits,
      stop_bits,
      offset,
      numBytes,
      str,
    );
  }

  _dart_gpioWaveAddSerial _gpioWaveAddSerial;

  int gpioWaveCreate() {
    _gpioWaveCreate ??=
        _dylib.lookupFunction<_c_gpioWaveCreate, _dart_gpioWaveCreate>(
            'gpioWaveCreate');
    return _gpioWaveCreate();
  }

  _dart_gpioWaveCreate _gpioWaveCreate;

  int gpioWaveCreatePad(
    int pctCB,
    int pctBOOL,
    int pctTOOL,
  ) {
    _gpioWaveCreatePad ??=
        _dylib.lookupFunction<_c_gpioWaveCreatePad, _dart_gpioWaveCreatePad>(
            'gpioWaveCreatePad');
    return _gpioWaveCreatePad(
      pctCB,
      pctBOOL,
      pctTOOL,
    );
  }

  _dart_gpioWaveCreatePad _gpioWaveCreatePad;

  int gpioWaveDelete(
    int wave_id,
  ) {
    _gpioWaveDelete ??=
        _dylib.lookupFunction<_c_gpioWaveDelete, _dart_gpioWaveDelete>(
            'gpioWaveDelete');
    return _gpioWaveDelete(
      wave_id,
    );
  }

  _dart_gpioWaveDelete _gpioWaveDelete;

  int gpioWaveTxSend(
    int wave_id,
    int wave_mode,
  ) {
    _gpioWaveTxSend ??=
        _dylib.lookupFunction<_c_gpioWaveTxSend, _dart_gpioWaveTxSend>(
            'gpioWaveTxSend');
    return _gpioWaveTxSend(
      wave_id,
      wave_mode,
    );
  }

  _dart_gpioWaveTxSend _gpioWaveTxSend;

  int gpioWaveChain(
    ffi.Pointer<ffi.Int8> buf,
    int bufSize,
  ) {
    _gpioWaveChain ??= _dylib
        .lookupFunction<_c_gpioWaveChain, _dart_gpioWaveChain>('gpioWaveChain');
    return _gpioWaveChain(
      buf,
      bufSize,
    );
  }

  _dart_gpioWaveChain _gpioWaveChain;

  int gpioWaveTxAt() {
    _gpioWaveTxAt ??= _dylib
        .lookupFunction<_c_gpioWaveTxAt, _dart_gpioWaveTxAt>('gpioWaveTxAt');
    return _gpioWaveTxAt();
  }

  _dart_gpioWaveTxAt _gpioWaveTxAt;

  int gpioWaveTxBusy() {
    _gpioWaveTxBusy ??=
        _dylib.lookupFunction<_c_gpioWaveTxBusy, _dart_gpioWaveTxBusy>(
            'gpioWaveTxBusy');
    return _gpioWaveTxBusy();
  }

  _dart_gpioWaveTxBusy _gpioWaveTxBusy;

  int gpioWaveTxStop() {
    _gpioWaveTxStop ??=
        _dylib.lookupFunction<_c_gpioWaveTxStop, _dart_gpioWaveTxStop>(
            'gpioWaveTxStop');
    return _gpioWaveTxStop();
  }

  _dart_gpioWaveTxStop _gpioWaveTxStop;

  int gpioWaveGetMicros() {
    _gpioWaveGetMicros ??=
        _dylib.lookupFunction<_c_gpioWaveGetMicros, _dart_gpioWaveGetMicros>(
            'gpioWaveGetMicros');
    return _gpioWaveGetMicros();
  }

  _dart_gpioWaveGetMicros _gpioWaveGetMicros;

  int gpioWaveGetHighMicros() {
    _gpioWaveGetHighMicros ??= _dylib.lookupFunction<_c_gpioWaveGetHighMicros,
        _dart_gpioWaveGetHighMicros>('gpioWaveGetHighMicros');
    return _gpioWaveGetHighMicros();
  }

  _dart_gpioWaveGetHighMicros _gpioWaveGetHighMicros;

  int gpioWaveGetMaxMicros() {
    _gpioWaveGetMaxMicros ??= _dylib.lookupFunction<_c_gpioWaveGetMaxMicros,
        _dart_gpioWaveGetMaxMicros>('gpioWaveGetMaxMicros');
    return _gpioWaveGetMaxMicros();
  }

  _dart_gpioWaveGetMaxMicros _gpioWaveGetMaxMicros;

  int gpioWaveGetPulses() {
    _gpioWaveGetPulses ??=
        _dylib.lookupFunction<_c_gpioWaveGetPulses, _dart_gpioWaveGetPulses>(
            'gpioWaveGetPulses');
    return _gpioWaveGetPulses();
  }

  _dart_gpioWaveGetPulses _gpioWaveGetPulses;

  int gpioWaveGetHighPulses() {
    _gpioWaveGetHighPulses ??= _dylib.lookupFunction<_c_gpioWaveGetHighPulses,
        _dart_gpioWaveGetHighPulses>('gpioWaveGetHighPulses');
    return _gpioWaveGetHighPulses();
  }

  _dart_gpioWaveGetHighPulses _gpioWaveGetHighPulses;

  int gpioWaveGetMaxPulses() {
    _gpioWaveGetMaxPulses ??= _dylib.lookupFunction<_c_gpioWaveGetMaxPulses,
        _dart_gpioWaveGetMaxPulses>('gpioWaveGetMaxPulses');
    return _gpioWaveGetMaxPulses();
  }

  _dart_gpioWaveGetMaxPulses _gpioWaveGetMaxPulses;

  int gpioWaveGetCbs() {
    _gpioWaveGetCbs ??=
        _dylib.lookupFunction<_c_gpioWaveGetCbs, _dart_gpioWaveGetCbs>(
            'gpioWaveGetCbs');
    return _gpioWaveGetCbs();
  }

  _dart_gpioWaveGetCbs _gpioWaveGetCbs;

  int gpioWaveGetHighCbs() {
    _gpioWaveGetHighCbs ??=
        _dylib.lookupFunction<_c_gpioWaveGetHighCbs, _dart_gpioWaveGetHighCbs>(
            'gpioWaveGetHighCbs');
    return _gpioWaveGetHighCbs();
  }

  _dart_gpioWaveGetHighCbs _gpioWaveGetHighCbs;

  int gpioWaveGetMaxCbs() {
    _gpioWaveGetMaxCbs ??=
        _dylib.lookupFunction<_c_gpioWaveGetMaxCbs, _dart_gpioWaveGetMaxCbs>(
            'gpioWaveGetMaxCbs');
    return _gpioWaveGetMaxCbs();
  }

  _dart_gpioWaveGetMaxCbs _gpioWaveGetMaxCbs;

  int gpioSerialReadOpen(
    int user_gpio,
    int baud,
    int data_bits,
  ) {
    _gpioSerialReadOpen ??=
        _dylib.lookupFunction<_c_gpioSerialReadOpen, _dart_gpioSerialReadOpen>(
            'gpioSerialReadOpen');
    return _gpioSerialReadOpen(
      user_gpio,
      baud,
      data_bits,
    );
  }

  _dart_gpioSerialReadOpen _gpioSerialReadOpen;

  int gpioSerialReadInvert(
    int user_gpio,
    int invert,
  ) {
    _gpioSerialReadInvert ??= _dylib.lookupFunction<_c_gpioSerialReadInvert,
        _dart_gpioSerialReadInvert>('gpioSerialReadInvert');
    return _gpioSerialReadInvert(
      user_gpio,
      invert,
    );
  }

  _dart_gpioSerialReadInvert _gpioSerialReadInvert;

  int gpioSerialRead(
    int user_gpio,
    ffi.Pointer<ffi.Void> buf,
    int bufSize,
  ) {
    _gpioSerialRead ??=
        _dylib.lookupFunction<_c_gpioSerialRead, _dart_gpioSerialRead>(
            'gpioSerialRead');
    return _gpioSerialRead(
      user_gpio,
      buf,
      bufSize,
    );
  }

  _dart_gpioSerialRead _gpioSerialRead;

  int gpioSerialReadClose(
    int user_gpio,
  ) {
    _gpioSerialReadClose ??= _dylib.lookupFunction<_c_gpioSerialReadClose,
        _dart_gpioSerialReadClose>('gpioSerialReadClose');
    return _gpioSerialReadClose(
      user_gpio,
    );
  }

  _dart_gpioSerialReadClose _gpioSerialReadClose;

  int i2cOpen(
    int i2cBus,
    int i2cAddr,
    int i2cFlags,
  ) {
    _i2cOpen ??= _dylib.lookupFunction<_c_i2cOpen, _dart_i2cOpen>('i2cOpen');
    return _i2cOpen(
      i2cBus,
      i2cAddr,
      i2cFlags,
    );
  }

  _dart_i2cOpen _i2cOpen;

  int i2cClose(
    int handle,
  ) {
    _i2cClose ??=
        _dylib.lookupFunction<_c_i2cClose, _dart_i2cClose>('i2cClose');
    return _i2cClose(
      handle,
    );
  }

  _dart_i2cClose _i2cClose;

  int i2cWriteQuick(
    int handle,
    int bit,
  ) {
    _i2cWriteQuick ??= _dylib
        .lookupFunction<_c_i2cWriteQuick, _dart_i2cWriteQuick>('i2cWriteQuick');
    return _i2cWriteQuick(
      handle,
      bit,
    );
  }

  _dart_i2cWriteQuick _i2cWriteQuick;

  int i2cWriteByte(
    int handle,
    int bVal,
  ) {
    _i2cWriteByte ??= _dylib
        .lookupFunction<_c_i2cWriteByte, _dart_i2cWriteByte>('i2cWriteByte');
    return _i2cWriteByte(
      handle,
      bVal,
    );
  }

  _dart_i2cWriteByte _i2cWriteByte;

  int i2cReadByte(
    int handle,
  ) {
    _i2cReadByte ??=
        _dylib.lookupFunction<_c_i2cReadByte, _dart_i2cReadByte>('i2cReadByte');
    return _i2cReadByte(
      handle,
    );
  }

  _dart_i2cReadByte _i2cReadByte;

  int i2cWriteByteData(
    int handle,
    int i2cReg,
    int bVal,
  ) {
    _i2cWriteByteData ??=
        _dylib.lookupFunction<_c_i2cWriteByteData, _dart_i2cWriteByteData>(
            'i2cWriteByteData');
    return _i2cWriteByteData(
      handle,
      i2cReg,
      bVal,
    );
  }

  _dart_i2cWriteByteData _i2cWriteByteData;

  int i2cWriteWordData(
    int handle,
    int i2cReg,
    int wVal,
  ) {
    _i2cWriteWordData ??=
        _dylib.lookupFunction<_c_i2cWriteWordData, _dart_i2cWriteWordData>(
            'i2cWriteWordData');
    return _i2cWriteWordData(
      handle,
      i2cReg,
      wVal,
    );
  }

  _dart_i2cWriteWordData _i2cWriteWordData;

  int i2cReadByteData(
    int handle,
    int i2cReg,
  ) {
    _i2cReadByteData ??=
        _dylib.lookupFunction<_c_i2cReadByteData, _dart_i2cReadByteData>(
            'i2cReadByteData');
    return _i2cReadByteData(
      handle,
      i2cReg,
    );
  }

  _dart_i2cReadByteData _i2cReadByteData;

  int i2cReadWordData(
    int handle,
    int i2cReg,
  ) {
    _i2cReadWordData ??=
        _dylib.lookupFunction<_c_i2cReadWordData, _dart_i2cReadWordData>(
            'i2cReadWordData');
    return _i2cReadWordData(
      handle,
      i2cReg,
    );
  }

  _dart_i2cReadWordData _i2cReadWordData;

  int i2cProcessCall(
    int handle,
    int i2cReg,
    int wVal,
  ) {
    _i2cProcessCall ??=
        _dylib.lookupFunction<_c_i2cProcessCall, _dart_i2cProcessCall>(
            'i2cProcessCall');
    return _i2cProcessCall(
      handle,
      i2cReg,
      wVal,
    );
  }

  _dart_i2cProcessCall _i2cProcessCall;

  int i2cWriteBlockData(
    int handle,
    int i2cReg,
    ffi.Pointer<ffi.Int8> buf,
    int count,
  ) {
    _i2cWriteBlockData ??=
        _dylib.lookupFunction<_c_i2cWriteBlockData, _dart_i2cWriteBlockData>(
            'i2cWriteBlockData');
    return _i2cWriteBlockData(
      handle,
      i2cReg,
      buf,
      count,
    );
  }

  _dart_i2cWriteBlockData _i2cWriteBlockData;

  int i2cReadBlockData(
    int handle,
    int i2cReg,
    ffi.Pointer<ffi.Int8> buf,
  ) {
    _i2cReadBlockData ??=
        _dylib.lookupFunction<_c_i2cReadBlockData, _dart_i2cReadBlockData>(
            'i2cReadBlockData');
    return _i2cReadBlockData(
      handle,
      i2cReg,
      buf,
    );
  }

  _dart_i2cReadBlockData _i2cReadBlockData;

  int i2cBlockProcessCall(
    int handle,
    int i2cReg,
    ffi.Pointer<ffi.Int8> buf,
    int count,
  ) {
    _i2cBlockProcessCall ??= _dylib.lookupFunction<_c_i2cBlockProcessCall,
        _dart_i2cBlockProcessCall>('i2cBlockProcessCall');
    return _i2cBlockProcessCall(
      handle,
      i2cReg,
      buf,
      count,
    );
  }

  _dart_i2cBlockProcessCall _i2cBlockProcessCall;

  int i2cReadI2CBlockData(
    int handle,
    int i2cReg,
    ffi.Pointer<ffi.Int8> buf,
    int count,
  ) {
    _i2cReadI2CBlockData ??= _dylib.lookupFunction<_c_i2cReadI2CBlockData,
        _dart_i2cReadI2CBlockData>('i2cReadI2CBlockData');
    return _i2cReadI2CBlockData(
      handle,
      i2cReg,
      buf,
      count,
    );
  }

  _dart_i2cReadI2CBlockData _i2cReadI2CBlockData;

  int i2cWriteI2CBlockData(
    int handle,
    int i2cReg,
    ffi.Pointer<ffi.Int8> buf,
    int count,
  ) {
    _i2cWriteI2CBlockData ??= _dylib.lookupFunction<_c_i2cWriteI2CBlockData,
        _dart_i2cWriteI2CBlockData>('i2cWriteI2CBlockData');
    return _i2cWriteI2CBlockData(
      handle,
      i2cReg,
      buf,
      count,
    );
  }

  _dart_i2cWriteI2CBlockData _i2cWriteI2CBlockData;

  int i2cReadDevice(
    int handle,
    ffi.Pointer<ffi.Int8> buf,
    int count,
  ) {
    _i2cReadDevice ??= _dylib
        .lookupFunction<_c_i2cReadDevice, _dart_i2cReadDevice>('i2cReadDevice');
    return _i2cReadDevice(
      handle,
      buf,
      count,
    );
  }

  _dart_i2cReadDevice _i2cReadDevice;

  int i2cWriteDevice(
    int handle,
    ffi.Pointer<ffi.Int8> buf,
    int count,
  ) {
    _i2cWriteDevice ??=
        _dylib.lookupFunction<_c_i2cWriteDevice, _dart_i2cWriteDevice>(
            'i2cWriteDevice');
    return _i2cWriteDevice(
      handle,
      buf,
      count,
    );
  }

  _dart_i2cWriteDevice _i2cWriteDevice;

  void i2cSwitchCombined(
    int setting,
  ) {
    _i2cSwitchCombined ??=
        _dylib.lookupFunction<_c_i2cSwitchCombined, _dart_i2cSwitchCombined>(
            'i2cSwitchCombined');
    return _i2cSwitchCombined(
      setting,
    );
  }

  _dart_i2cSwitchCombined _i2cSwitchCombined;

  int i2cSegments(
    int handle,
    ffi.Pointer<pi_i2c_msg_t> segs,
    int numSegs,
  ) {
    _i2cSegments ??=
        _dylib.lookupFunction<_c_i2cSegments, _dart_i2cSegments>('i2cSegments');
    return _i2cSegments(
      handle,
      segs,
      numSegs,
    );
  }

  _dart_i2cSegments _i2cSegments;

  int i2cZip(
    int handle,
    ffi.Pointer<ffi.Int8> inBuf,
    int inLen,
    ffi.Pointer<ffi.Int8> outBuf,
    int outLen,
  ) {
    _i2cZip ??= _dylib.lookupFunction<_c_i2cZip, _dart_i2cZip>('i2cZip');
    return _i2cZip(
      handle,
      inBuf,
      inLen,
      outBuf,
      outLen,
    );
  }

  _dart_i2cZip _i2cZip;

  int bbI2COpen(
    int SDA,
    int SCL,
    int baud,
  ) {
    _bbI2COpen ??=
        _dylib.lookupFunction<_c_bbI2COpen, _dart_bbI2COpen>('bbI2COpen');
    return _bbI2COpen(
      SDA,
      SCL,
      baud,
    );
  }

  _dart_bbI2COpen _bbI2COpen;

  int bbI2CClose(
    int SDA,
  ) {
    _bbI2CClose ??=
        _dylib.lookupFunction<_c_bbI2CClose, _dart_bbI2CClose>('bbI2CClose');
    return _bbI2CClose(
      SDA,
    );
  }

  _dart_bbI2CClose _bbI2CClose;

  int bbI2CZip(
    int SDA,
    ffi.Pointer<ffi.Int8> inBuf,
    int inLen,
    ffi.Pointer<ffi.Int8> outBuf,
    int outLen,
  ) {
    _bbI2CZip ??=
        _dylib.lookupFunction<_c_bbI2CZip, _dart_bbI2CZip>('bbI2CZip');
    return _bbI2CZip(
      SDA,
      inBuf,
      inLen,
      outBuf,
      outLen,
    );
  }

  _dart_bbI2CZip _bbI2CZip;

  int bscXfer(
    ffi.Pointer<bsc_xfer_t> bsc_xfer,
  ) {
    _bscXfer ??= _dylib.lookupFunction<_c_bscXfer, _dart_bscXfer>('bscXfer');
    return _bscXfer(
      bsc_xfer,
    );
  }

  _dart_bscXfer _bscXfer;

  int bbSPIOpen(
    int CS,
    int MISO,
    int MOSI,
    int SCLK,
    int baud,
    int spiFlags,
  ) {
    _bbSPIOpen ??=
        _dylib.lookupFunction<_c_bbSPIOpen, _dart_bbSPIOpen>('bbSPIOpen');
    return _bbSPIOpen(
      CS,
      MISO,
      MOSI,
      SCLK,
      baud,
      spiFlags,
    );
  }

  _dart_bbSPIOpen _bbSPIOpen;

  int bbSPIClose(
    int CS,
  ) {
    _bbSPIClose ??=
        _dylib.lookupFunction<_c_bbSPIClose, _dart_bbSPIClose>('bbSPIClose');
    return _bbSPIClose(
      CS,
    );
  }

  _dart_bbSPIClose _bbSPIClose;

  int bbSPIXfer(
    int CS,
    ffi.Pointer<ffi.Int8> inBuf,
    ffi.Pointer<ffi.Int8> outBuf,
    int count,
  ) {
    _bbSPIXfer ??=
        _dylib.lookupFunction<_c_bbSPIXfer, _dart_bbSPIXfer>('bbSPIXfer');
    return _bbSPIXfer(
      CS,
      inBuf,
      outBuf,
      count,
    );
  }

  _dart_bbSPIXfer _bbSPIXfer;

  int spiOpen(
    int spiChan,
    int baud,
    int spiFlags,
  ) {
    _spiOpen ??= _dylib.lookupFunction<_c_spiOpen, _dart_spiOpen>('spiOpen');
    return _spiOpen(
      spiChan,
      baud,
      spiFlags,
    );
  }

  _dart_spiOpen _spiOpen;

  int spiClose(
    int handle,
  ) {
    _spiClose ??=
        _dylib.lookupFunction<_c_spiClose, _dart_spiClose>('spiClose');
    return _spiClose(
      handle,
    );
  }

  _dart_spiClose _spiClose;

  int spiRead(
    int handle,
    ffi.Pointer<ffi.Int8> buf,
    int count,
  ) {
    _spiRead ??= _dylib.lookupFunction<_c_spiRead, _dart_spiRead>('spiRead');
    return _spiRead(
      handle,
      buf,
      count,
    );
  }

  _dart_spiRead _spiRead;

  int spiWrite(
    int handle,
    ffi.Pointer<ffi.Int8> buf,
    int count,
  ) {
    _spiWrite ??=
        _dylib.lookupFunction<_c_spiWrite, _dart_spiWrite>('spiWrite');
    return _spiWrite(
      handle,
      buf,
      count,
    );
  }

  _dart_spiWrite _spiWrite;

  int spiXfer(
    int handle,
    ffi.Pointer<ffi.Int8> txBuf,
    ffi.Pointer<ffi.Int8> rxBuf,
    int count,
  ) {
    _spiXfer ??= _dylib.lookupFunction<_c_spiXfer, _dart_spiXfer>('spiXfer');
    return _spiXfer(
      handle,
      txBuf,
      rxBuf,
      count,
    );
  }

  _dart_spiXfer _spiXfer;

  int serOpen(
    ffi.Pointer<ffi.Int8> sertty,
    int baud,
    int serFlags,
  ) {
    _serOpen ??= _dylib.lookupFunction<_c_serOpen, _dart_serOpen>('serOpen');
    return _serOpen(
      sertty,
      baud,
      serFlags,
    );
  }

  _dart_serOpen _serOpen;

  int serClose(
    int handle,
  ) {
    _serClose ??=
        _dylib.lookupFunction<_c_serClose, _dart_serClose>('serClose');
    return _serClose(
      handle,
    );
  }

  _dart_serClose _serClose;

  int serWriteByte(
    int handle,
    int bVal,
  ) {
    _serWriteByte ??= _dylib
        .lookupFunction<_c_serWriteByte, _dart_serWriteByte>('serWriteByte');
    return _serWriteByte(
      handle,
      bVal,
    );
  }

  _dart_serWriteByte _serWriteByte;

  int serReadByte(
    int handle,
  ) {
    _serReadByte ??=
        _dylib.lookupFunction<_c_serReadByte, _dart_serReadByte>('serReadByte');
    return _serReadByte(
      handle,
    );
  }

  _dart_serReadByte _serReadByte;

  int serWrite(
    int handle,
    ffi.Pointer<ffi.Int8> buf,
    int count,
  ) {
    _serWrite ??=
        _dylib.lookupFunction<_c_serWrite, _dart_serWrite>('serWrite');
    return _serWrite(
      handle,
      buf,
      count,
    );
  }

  _dart_serWrite _serWrite;

  int serRead(
    int handle,
    ffi.Pointer<ffi.Int8> buf,
    int count,
  ) {
    _serRead ??= _dylib.lookupFunction<_c_serRead, _dart_serRead>('serRead');
    return _serRead(
      handle,
      buf,
      count,
    );
  }

  _dart_serRead _serRead;

  int serDataAvailable(
    int handle,
  ) {
    _serDataAvailable ??=
        _dylib.lookupFunction<_c_serDataAvailable, _dart_serDataAvailable>(
            'serDataAvailable');
    return _serDataAvailable(
      handle,
    );
  }

  _dart_serDataAvailable _serDataAvailable;

  int gpioTrigger(
    int user_gpio,
    int pulseLen,
    int level,
  ) {
    _gpioTrigger ??=
        _dylib.lookupFunction<_c_gpioTrigger, _dart_gpioTrigger>('gpioTrigger');
    return _gpioTrigger(
      user_gpio,
      pulseLen,
      level,
    );
  }

  _dart_gpioTrigger _gpioTrigger;

  int gpioSetWatchdog(
    int user_gpio,
    int timeout,
  ) {
    _gpioSetWatchdog ??=
        _dylib.lookupFunction<_c_gpioSetWatchdog, _dart_gpioSetWatchdog>(
            'gpioSetWatchdog');
    return _gpioSetWatchdog(
      user_gpio,
      timeout,
    );
  }

  _dart_gpioSetWatchdog _gpioSetWatchdog;

  int gpioNoiseFilter(
    int user_gpio,
    int steady,
    int active,
  ) {
    _gpioNoiseFilter ??=
        _dylib.lookupFunction<_c_gpioNoiseFilter, _dart_gpioNoiseFilter>(
            'gpioNoiseFilter');
    return _gpioNoiseFilter(
      user_gpio,
      steady,
      active,
    );
  }

  _dart_gpioNoiseFilter _gpioNoiseFilter;

  int gpioGlitchFilter(
    int user_gpio,
    int steady,
  ) {
    _gpioGlitchFilter ??=
        _dylib.lookupFunction<_c_gpioGlitchFilter, _dart_gpioGlitchFilter>(
            'gpioGlitchFilter');
    return _gpioGlitchFilter(
      user_gpio,
      steady,
    );
  }

  _dart_gpioGlitchFilter _gpioGlitchFilter;

  int gpioSetGetSamplesFunc(
    ffi.Pointer<ffi.NativeFunction<gpioGetSamplesFunc_t>> f,
    int bits,
  ) {
    _gpioSetGetSamplesFunc ??= _dylib.lookupFunction<_c_gpioSetGetSamplesFunc,
        _dart_gpioSetGetSamplesFunc>('gpioSetGetSamplesFunc');
    return _gpioSetGetSamplesFunc(
      f,
      bits,
    );
  }

  _dart_gpioSetGetSamplesFunc _gpioSetGetSamplesFunc;

  int gpioSetGetSamplesFuncEx(
    ffi.Pointer<ffi.NativeFunction<gpioGetSamplesFuncEx_t>> f,
    int bits,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _gpioSetGetSamplesFuncEx ??= _dylib.lookupFunction<
        _c_gpioSetGetSamplesFuncEx,
        _dart_gpioSetGetSamplesFuncEx>('gpioSetGetSamplesFuncEx');
    return _gpioSetGetSamplesFuncEx(
      f,
      bits,
      userdata,
    );
  }

  _dart_gpioSetGetSamplesFuncEx _gpioSetGetSamplesFuncEx;

  int gpioSetTimerFunc(
    int timer,
    int millis,
    ffi.Pointer<ffi.NativeFunction<gpioTimerFunc_t>> f,
  ) {
    _gpioSetTimerFunc ??=
        _dylib.lookupFunction<_c_gpioSetTimerFunc, _dart_gpioSetTimerFunc>(
            'gpioSetTimerFunc');
    return _gpioSetTimerFunc(
      timer,
      millis,
      f,
    );
  }

  _dart_gpioSetTimerFunc _gpioSetTimerFunc;

  int gpioSetTimerFuncEx(
    int timer,
    int millis,
    ffi.Pointer<ffi.NativeFunction<gpioTimerFuncEx_t>> f,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _gpioSetTimerFuncEx ??=
        _dylib.lookupFunction<_c_gpioSetTimerFuncEx, _dart_gpioSetTimerFuncEx>(
            'gpioSetTimerFuncEx');
    return _gpioSetTimerFuncEx(
      timer,
      millis,
      f,
      userdata,
    );
  }

  _dart_gpioSetTimerFuncEx _gpioSetTimerFuncEx;

  ffi.Pointer<ffi.Pointer<_opaque_pthread_t>> gpioStartThread(
    ffi.Pointer<ffi.NativeFunction<gpioThreadFunc_t>> f,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _gpioStartThread ??=
        _dylib.lookupFunction<_c_gpioStartThread, _dart_gpioStartThread>(
            'gpioStartThread');
    return _gpioStartThread(
      f,
      userdata,
    );
  }

  _dart_gpioStartThread _gpioStartThread;

  void gpioStopThread(
    ffi.Pointer<ffi.Pointer<_opaque_pthread_t>> pth,
  ) {
    _gpioStopThread ??=
        _dylib.lookupFunction<_c_gpioStopThread, _dart_gpioStopThread>(
            'gpioStopThread');
    return _gpioStopThread(
      pth,
    );
  }

  _dart_gpioStopThread _gpioStopThread;

  int gpioStoreScript(
    ffi.Pointer<ffi.Int8> script,
  ) {
    _gpioStoreScript ??=
        _dylib.lookupFunction<_c_gpioStoreScript, _dart_gpioStoreScript>(
            'gpioStoreScript');
    return _gpioStoreScript(
      script,
    );
  }

  _dart_gpioStoreScript _gpioStoreScript;

  int gpioRunScript(
    int script_id,
    int numPar,
    ffi.Pointer<ffi.Uint32> param,
  ) {
    _gpioRunScript ??= _dylib
        .lookupFunction<_c_gpioRunScript, _dart_gpioRunScript>('gpioRunScript');
    return _gpioRunScript(
      script_id,
      numPar,
      param,
    );
  }

  _dart_gpioRunScript _gpioRunScript;

  int gpioUpdateScript(
    int script_id,
    int numPar,
    ffi.Pointer<ffi.Uint32> param,
  ) {
    _gpioUpdateScript ??=
        _dylib.lookupFunction<_c_gpioUpdateScript, _dart_gpioUpdateScript>(
            'gpioUpdateScript');
    return _gpioUpdateScript(
      script_id,
      numPar,
      param,
    );
  }

  _dart_gpioUpdateScript _gpioUpdateScript;

  int gpioScriptStatus(
    int script_id,
    ffi.Pointer<ffi.Uint32> param,
  ) {
    _gpioScriptStatus ??=
        _dylib.lookupFunction<_c_gpioScriptStatus, _dart_gpioScriptStatus>(
            'gpioScriptStatus');
    return _gpioScriptStatus(
      script_id,
      param,
    );
  }

  _dart_gpioScriptStatus _gpioScriptStatus;

  int gpioStopScript(
    int script_id,
  ) {
    _gpioStopScript ??=
        _dylib.lookupFunction<_c_gpioStopScript, _dart_gpioStopScript>(
            'gpioStopScript');
    return _gpioStopScript(
      script_id,
    );
  }

  _dart_gpioStopScript _gpioStopScript;

  int gpioDeleteScript(
    int script_id,
  ) {
    _gpioDeleteScript ??=
        _dylib.lookupFunction<_c_gpioDeleteScript, _dart_gpioDeleteScript>(
            'gpioDeleteScript');
    return _gpioDeleteScript(
      script_id,
    );
  }

  _dart_gpioDeleteScript _gpioDeleteScript;

  int gpioSetSignalFunc(
    int signum,
    ffi.Pointer<ffi.NativeFunction<gpioSignalFunc_t>> f,
  ) {
    _gpioSetSignalFunc ??=
        _dylib.lookupFunction<_c_gpioSetSignalFunc, _dart_gpioSetSignalFunc>(
            'gpioSetSignalFunc');
    return _gpioSetSignalFunc(
      signum,
      f,
    );
  }

  _dart_gpioSetSignalFunc _gpioSetSignalFunc;

  int gpioSetSignalFuncEx(
    int signum,
    ffi.Pointer<ffi.NativeFunction<gpioSignalFuncEx_t>> f,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _gpioSetSignalFuncEx ??= _dylib.lookupFunction<_c_gpioSetSignalFuncEx,
        _dart_gpioSetSignalFuncEx>('gpioSetSignalFuncEx');
    return _gpioSetSignalFuncEx(
      signum,
      f,
      userdata,
    );
  }

  _dart_gpioSetSignalFuncEx _gpioSetSignalFuncEx;

  int gpioRead_Bits_0_31() {
    _gpioRead_Bits_0_31 ??=
        _dylib.lookupFunction<_c_gpioRead_Bits_0_31, _dart_gpioRead_Bits_0_31>(
            'gpioRead_Bits_0_31');
    return _gpioRead_Bits_0_31();
  }

  _dart_gpioRead_Bits_0_31 _gpioRead_Bits_0_31;

  int gpioRead_Bits_32_53() {
    _gpioRead_Bits_32_53 ??= _dylib.lookupFunction<_c_gpioRead_Bits_32_53,
        _dart_gpioRead_Bits_32_53>('gpioRead_Bits_32_53');
    return _gpioRead_Bits_32_53();
  }

  _dart_gpioRead_Bits_32_53 _gpioRead_Bits_32_53;

  int gpioWrite_Bits_0_31_Clear(
    int bits,
  ) {
    _gpioWrite_Bits_0_31_Clear ??= _dylib.lookupFunction<
        _c_gpioWrite_Bits_0_31_Clear,
        _dart_gpioWrite_Bits_0_31_Clear>('gpioWrite_Bits_0_31_Clear');
    return _gpioWrite_Bits_0_31_Clear(
      bits,
    );
  }

  _dart_gpioWrite_Bits_0_31_Clear _gpioWrite_Bits_0_31_Clear;

  int gpioWrite_Bits_32_53_Clear(
    int bits,
  ) {
    _gpioWrite_Bits_32_53_Clear ??= _dylib.lookupFunction<
        _c_gpioWrite_Bits_32_53_Clear,
        _dart_gpioWrite_Bits_32_53_Clear>('gpioWrite_Bits_32_53_Clear');
    return _gpioWrite_Bits_32_53_Clear(
      bits,
    );
  }

  _dart_gpioWrite_Bits_32_53_Clear _gpioWrite_Bits_32_53_Clear;

  int gpioWrite_Bits_0_31_Set(
    int bits,
  ) {
    _gpioWrite_Bits_0_31_Set ??= _dylib.lookupFunction<
        _c_gpioWrite_Bits_0_31_Set,
        _dart_gpioWrite_Bits_0_31_Set>('gpioWrite_Bits_0_31_Set');
    return _gpioWrite_Bits_0_31_Set(
      bits,
    );
  }

  _dart_gpioWrite_Bits_0_31_Set _gpioWrite_Bits_0_31_Set;

  int gpioWrite_Bits_32_53_Set(
    int bits,
  ) {
    _gpioWrite_Bits_32_53_Set ??= _dylib.lookupFunction<
        _c_gpioWrite_Bits_32_53_Set,
        _dart_gpioWrite_Bits_32_53_Set>('gpioWrite_Bits_32_53_Set');
    return _gpioWrite_Bits_32_53_Set(
      bits,
    );
  }

  _dart_gpioWrite_Bits_32_53_Set _gpioWrite_Bits_32_53_Set;

  int gpioHardwareClock(
    int gpio,
    int clkfreq,
  ) {
    _gpioHardwareClock ??=
        _dylib.lookupFunction<_c_gpioHardwareClock, _dart_gpioHardwareClock>(
            'gpioHardwareClock');
    return _gpioHardwareClock(
      gpio,
      clkfreq,
    );
  }

  _dart_gpioHardwareClock _gpioHardwareClock;

  int gpioHardwarePWM(
    int gpio,
    int PWMfreq,
    int PWMduty,
  ) {
    _gpioHardwarePWM ??=
        _dylib.lookupFunction<_c_gpioHardwarePWM, _dart_gpioHardwarePWM>(
            'gpioHardwarePWM');
    return _gpioHardwarePWM(
      gpio,
      PWMfreq,
      PWMduty,
    );
  }

  _dart_gpioHardwarePWM _gpioHardwarePWM;

  int gpioTime(
    int timetype,
    ffi.Pointer<ffi.Int32> seconds,
    ffi.Pointer<ffi.Int32> micros,
  ) {
    _gpioTime ??=
        _dylib.lookupFunction<_c_gpioTime, _dart_gpioTime>('gpioTime');
    return _gpioTime(
      timetype,
      seconds,
      micros,
    );
  }

  _dart_gpioTime _gpioTime;

  int gpioSleep(
    int timetype,
    int seconds,
    int micros,
  ) {
    _gpioSleep ??=
        _dylib.lookupFunction<_c_gpioSleep, _dart_gpioSleep>('gpioSleep');
    return _gpioSleep(
      timetype,
      seconds,
      micros,
    );
  }

  _dart_gpioSleep _gpioSleep;

  int gpioDelay(
    int micros,
  ) {
    _gpioDelay ??=
        _dylib.lookupFunction<_c_gpioDelay, _dart_gpioDelay>('gpioDelay');
    return _gpioDelay(
      micros,
    );
  }

  _dart_gpioDelay _gpioDelay;

  int gpioTick() {
    _gpioTick ??=
        _dylib.lookupFunction<_c_gpioTick, _dart_gpioTick>('gpioTick');
    return _gpioTick();
  }

  _dart_gpioTick _gpioTick;

  int gpioHardwareRevision() {
    _gpioHardwareRevision ??= _dylib.lookupFunction<_c_gpioHardwareRevision,
        _dart_gpioHardwareRevision>('gpioHardwareRevision');
    return _gpioHardwareRevision();
  }

  _dart_gpioHardwareRevision _gpioHardwareRevision;

  int gpioVersion() {
    _gpioVersion ??=
        _dylib.lookupFunction<_c_gpioVersion, _dart_gpioVersion>('gpioVersion');
    return _gpioVersion();
  }

  _dart_gpioVersion _gpioVersion;

  int gpioGetPad(
    int pad,
  ) {
    _gpioGetPad ??=
        _dylib.lookupFunction<_c_gpioGetPad, _dart_gpioGetPad>('gpioGetPad');
    return _gpioGetPad(
      pad,
    );
  }

  _dart_gpioGetPad _gpioGetPad;

  int gpioSetPad(
    int pad,
    int padStrength,
  ) {
    _gpioSetPad ??=
        _dylib.lookupFunction<_c_gpioSetPad, _dart_gpioSetPad>('gpioSetPad');
    return _gpioSetPad(
      pad,
      padStrength,
    );
  }

  _dart_gpioSetPad _gpioSetPad;

  int eventMonitor(
    int handle,
    int bits,
  ) {
    _eventMonitor ??= _dylib
        .lookupFunction<_c_eventMonitor, _dart_eventMonitor>('eventMonitor');
    return _eventMonitor(
      handle,
      bits,
    );
  }

  _dart_eventMonitor _eventMonitor;

  int eventSetFunc(
    int event,
    ffi.Pointer<ffi.NativeFunction<eventFunc_t>> f,
  ) {
    _eventSetFunc ??= _dylib
        .lookupFunction<_c_eventSetFunc, _dart_eventSetFunc>('eventSetFunc');
    return _eventSetFunc(
      event,
      f,
    );
  }

  _dart_eventSetFunc _eventSetFunc;

  int eventSetFuncEx(
    int event,
    ffi.Pointer<ffi.NativeFunction<eventFuncEx_t>> f,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    _eventSetFuncEx ??=
        _dylib.lookupFunction<_c_eventSetFuncEx, _dart_eventSetFuncEx>(
            'eventSetFuncEx');
    return _eventSetFuncEx(
      event,
      f,
      userdata,
    );
  }

  _dart_eventSetFuncEx _eventSetFuncEx;

  int eventTrigger(
    int event,
  ) {
    _eventTrigger ??= _dylib
        .lookupFunction<_c_eventTrigger, _dart_eventTrigger>('eventTrigger');
    return _eventTrigger(
      event,
    );
  }

  _dart_eventTrigger _eventTrigger;

  int shell(
    ffi.Pointer<ffi.Int8> scriptName,
    ffi.Pointer<ffi.Int8> scriptString,
  ) {
    _shell ??= _dylib.lookupFunction<_c_shell, _dart_shell>('shell');
    return _shell(
      scriptName,
      scriptString,
    );
  }

  _dart_shell _shell;

  int fileOpen(
    ffi.Pointer<ffi.Int8> file,
    int mode,
  ) {
    _fileOpen ??=
        _dylib.lookupFunction<_c_fileOpen, _dart_fileOpen>('fileOpen');
    return _fileOpen(
      file,
      mode,
    );
  }

  _dart_fileOpen _fileOpen;

  int fileClose(
    int handle,
  ) {
    _fileClose ??=
        _dylib.lookupFunction<_c_fileClose, _dart_fileClose>('fileClose');
    return _fileClose(
      handle,
    );
  }

  _dart_fileClose _fileClose;

  int fileWrite(
    int handle,
    ffi.Pointer<ffi.Int8> buf,
    int count,
  ) {
    _fileWrite ??=
        _dylib.lookupFunction<_c_fileWrite, _dart_fileWrite>('fileWrite');
    return _fileWrite(
      handle,
      buf,
      count,
    );
  }

  _dart_fileWrite _fileWrite;

  int fileRead(
    int handle,
    ffi.Pointer<ffi.Int8> buf,
    int count,
  ) {
    _fileRead ??=
        _dylib.lookupFunction<_c_fileRead, _dart_fileRead>('fileRead');
    return _fileRead(
      handle,
      buf,
      count,
    );
  }

  _dart_fileRead _fileRead;

  int fileSeek(
    int handle,
    int seekOffset,
    int seekFrom,
  ) {
    _fileSeek ??=
        _dylib.lookupFunction<_c_fileSeek, _dart_fileSeek>('fileSeek');
    return _fileSeek(
      handle,
      seekOffset,
      seekFrom,
    );
  }

  _dart_fileSeek _fileSeek;

  int fileList(
    ffi.Pointer<ffi.Int8> fpat,
    ffi.Pointer<ffi.Int8> buf,
    int count,
  ) {
    _fileList ??=
        _dylib.lookupFunction<_c_fileList, _dart_fileList>('fileList');
    return _fileList(
      fpat,
      buf,
      count,
    );
  }

  _dart_fileList _fileList;

  int gpioCfgBufferSize(
    int cfgMillis,
  ) {
    _gpioCfgBufferSize ??=
        _dylib.lookupFunction<_c_gpioCfgBufferSize, _dart_gpioCfgBufferSize>(
            'gpioCfgBufferSize');
    return _gpioCfgBufferSize(
      cfgMillis,
    );
  }

  _dart_gpioCfgBufferSize _gpioCfgBufferSize;

  int gpioCfgClock(
    int cfgMicros,
    int cfgPeripheral,
    int cfgSource,
  ) {
    _gpioCfgClock ??= _dylib
        .lookupFunction<_c_gpioCfgClock, _dart_gpioCfgClock>('gpioCfgClock');
    return _gpioCfgClock(
      cfgMicros,
      cfgPeripheral,
      cfgSource,
    );
  }

  _dart_gpioCfgClock _gpioCfgClock;

  int gpioCfgDMAchannel(
    int DMAchannel,
  ) {
    _gpioCfgDMAchannel ??=
        _dylib.lookupFunction<_c_gpioCfgDMAchannel, _dart_gpioCfgDMAchannel>(
            'gpioCfgDMAchannel');
    return _gpioCfgDMAchannel(
      DMAchannel,
    );
  }

  _dart_gpioCfgDMAchannel _gpioCfgDMAchannel;

  int gpioCfgDMAchannels(
    int primaryChannel,
    int secondaryChannel,
  ) {
    _gpioCfgDMAchannels ??=
        _dylib.lookupFunction<_c_gpioCfgDMAchannels, _dart_gpioCfgDMAchannels>(
            'gpioCfgDMAchannels');
    return _gpioCfgDMAchannels(
      primaryChannel,
      secondaryChannel,
    );
  }

  _dart_gpioCfgDMAchannels _gpioCfgDMAchannels;

  int gpioCfgPermissions(
    int updateMask,
  ) {
    _gpioCfgPermissions ??=
        _dylib.lookupFunction<_c_gpioCfgPermissions, _dart_gpioCfgPermissions>(
            'gpioCfgPermissions');
    return _gpioCfgPermissions(
      updateMask,
    );
  }

  _dart_gpioCfgPermissions _gpioCfgPermissions;

  int gpioCfgSocketPort(
    int port,
  ) {
    _gpioCfgSocketPort ??=
        _dylib.lookupFunction<_c_gpioCfgSocketPort, _dart_gpioCfgSocketPort>(
            'gpioCfgSocketPort');
    return _gpioCfgSocketPort(
      port,
    );
  }

  _dart_gpioCfgSocketPort _gpioCfgSocketPort;

  int gpioCfgInterfaces(
    int ifFlags,
  ) {
    _gpioCfgInterfaces ??=
        _dylib.lookupFunction<_c_gpioCfgInterfaces, _dart_gpioCfgInterfaces>(
            'gpioCfgInterfaces');
    return _gpioCfgInterfaces(
      ifFlags,
    );
  }

  _dart_gpioCfgInterfaces _gpioCfgInterfaces;

  int gpioCfgMemAlloc(
    int memAllocMode,
  ) {
    _gpioCfgMemAlloc ??=
        _dylib.lookupFunction<_c_gpioCfgMemAlloc, _dart_gpioCfgMemAlloc>(
            'gpioCfgMemAlloc');
    return _gpioCfgMemAlloc(
      memAllocMode,
    );
  }

  _dart_gpioCfgMemAlloc _gpioCfgMemAlloc;

  int gpioCfgNetAddr(
    int numSockAddr,
    ffi.Pointer<ffi.Uint32> sockAddr,
  ) {
    _gpioCfgNetAddr ??=
        _dylib.lookupFunction<_c_gpioCfgNetAddr, _dart_gpioCfgNetAddr>(
            'gpioCfgNetAddr');
    return _gpioCfgNetAddr(
      numSockAddr,
      sockAddr,
    );
  }

  _dart_gpioCfgNetAddr _gpioCfgNetAddr;

  int gpioCfgGetInternals() {
    _gpioCfgGetInternals ??= _dylib.lookupFunction<_c_gpioCfgGetInternals,
        _dart_gpioCfgGetInternals>('gpioCfgGetInternals');
    return _gpioCfgGetInternals();
  }

  _dart_gpioCfgGetInternals _gpioCfgGetInternals;

  int gpioCfgSetInternals(
    int cfgVal,
  ) {
    _gpioCfgSetInternals ??= _dylib.lookupFunction<_c_gpioCfgSetInternals,
        _dart_gpioCfgSetInternals>('gpioCfgSetInternals');
    return _gpioCfgSetInternals(
      cfgVal,
    );
  }

  _dart_gpioCfgSetInternals _gpioCfgSetInternals;

  int gpioCustom1(
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> argx,
    int argc,
  ) {
    _gpioCustom1 ??=
        _dylib.lookupFunction<_c_gpioCustom1, _dart_gpioCustom1>('gpioCustom1');
    return _gpioCustom1(
      arg1,
      arg2,
      argx,
      argc,
    );
  }

  _dart_gpioCustom1 _gpioCustom1;

  int gpioCustom2(
    int arg1,
    ffi.Pointer<ffi.Int8> argx,
    int argc,
    ffi.Pointer<ffi.Int8> retBuf,
    int retMax,
  ) {
    _gpioCustom2 ??=
        _dylib.lookupFunction<_c_gpioCustom2, _dart_gpioCustom2>('gpioCustom2');
    return _gpioCustom2(
      arg1,
      argx,
      argc,
      retBuf,
      retMax,
    );
  }

  _dart_gpioCustom2 _gpioCustom2;

  int rawWaveAddSPI(
    ffi.Pointer<rawSPI_t> spi,
    int offset,
    int spiSS,
    ffi.Pointer<ffi.Int8> buf,
    int spiTxBits,
    int spiBitFirst,
    int spiBitLast,
    int spiBits,
  ) {
    _rawWaveAddSPI ??= _dylib
        .lookupFunction<_c_rawWaveAddSPI, _dart_rawWaveAddSPI>('rawWaveAddSPI');
    return _rawWaveAddSPI(
      spi,
      offset,
      spiSS,
      buf,
      spiTxBits,
      spiBitFirst,
      spiBitLast,
      spiBits,
    );
  }

  _dart_rawWaveAddSPI _rawWaveAddSPI;

  int rawWaveAddGeneric(
    int numPulses,
    ffi.Pointer<rawWave_t> pulses,
  ) {
    _rawWaveAddGeneric ??=
        _dylib.lookupFunction<_c_rawWaveAddGeneric, _dart_rawWaveAddGeneric>(
            'rawWaveAddGeneric');
    return _rawWaveAddGeneric(
      numPulses,
      pulses,
    );
  }

  _dart_rawWaveAddGeneric _rawWaveAddGeneric;

  int rawWaveCB() {
    _rawWaveCB ??=
        _dylib.lookupFunction<_c_rawWaveCB, _dart_rawWaveCB>('rawWaveCB');
    return _rawWaveCB();
  }

  _dart_rawWaveCB _rawWaveCB;

  ffi.Pointer<rawCbs_t> rawWaveCBAdr(
    int cbNum,
  ) {
    _rawWaveCBAdr ??= _dylib
        .lookupFunction<_c_rawWaveCBAdr, _dart_rawWaveCBAdr>('rawWaveCBAdr');
    return _rawWaveCBAdr(
      cbNum,
    );
  }

  _dart_rawWaveCBAdr _rawWaveCBAdr;

  int rawWaveGetOOL(
    int pos,
  ) {
    _rawWaveGetOOL ??= _dylib
        .lookupFunction<_c_rawWaveGetOOL, _dart_rawWaveGetOOL>('rawWaveGetOOL');
    return _rawWaveGetOOL(
      pos,
    );
  }

  _dart_rawWaveGetOOL _rawWaveGetOOL;

  void rawWaveSetOOL(
    int pos,
    int lVal,
  ) {
    _rawWaveSetOOL ??= _dylib
        .lookupFunction<_c_rawWaveSetOOL, _dart_rawWaveSetOOL>('rawWaveSetOOL');
    return _rawWaveSetOOL(
      pos,
      lVal,
    );
  }

  _dart_rawWaveSetOOL _rawWaveSetOOL;

  int rawWaveGetOut(
    int pos,
  ) {
    _rawWaveGetOut ??= _dylib
        .lookupFunction<_c_rawWaveGetOut, _dart_rawWaveGetOut>('rawWaveGetOut');
    return _rawWaveGetOut(
      pos,
    );
  }

  _dart_rawWaveGetOut _rawWaveGetOut;

  void rawWaveSetOut(
    int pos,
    int lVal,
  ) {
    _rawWaveSetOut ??= _dylib
        .lookupFunction<_c_rawWaveSetOut, _dart_rawWaveSetOut>('rawWaveSetOut');
    return _rawWaveSetOut(
      pos,
      lVal,
    );
  }

  _dart_rawWaveSetOut _rawWaveSetOut;

  int rawWaveGetIn(
    int pos,
  ) {
    _rawWaveGetIn ??= _dylib
        .lookupFunction<_c_rawWaveGetIn, _dart_rawWaveGetIn>('rawWaveGetIn');
    return _rawWaveGetIn(
      pos,
    );
  }

  _dart_rawWaveGetIn _rawWaveGetIn;

  void rawWaveSetIn(
    int pos,
    int lVal,
  ) {
    _rawWaveSetIn ??= _dylib
        .lookupFunction<_c_rawWaveSetIn, _dart_rawWaveSetIn>('rawWaveSetIn');
    return _rawWaveSetIn(
      pos,
      lVal,
    );
  }

  _dart_rawWaveSetIn _rawWaveSetIn;

  int getBitInBytes(
    int bitPos,
    ffi.Pointer<ffi.Int8> buf,
    int numBits,
  ) {
    _getBitInBytes ??= _dylib
        .lookupFunction<_c_getBitInBytes, _dart_getBitInBytes>('getBitInBytes');
    return _getBitInBytes(
      bitPos,
      buf,
      numBits,
    );
  }

  _dart_getBitInBytes _getBitInBytes;

  void putBitInBytes(
    int bitPos,
    ffi.Pointer<ffi.Int8> buf,
    int bit,
  ) {
    _putBitInBytes ??= _dylib
        .lookupFunction<_c_putBitInBytes, _dart_putBitInBytes>('putBitInBytes');
    return _putBitInBytes(
      bitPos,
      buf,
      bit,
    );
  }

  _dart_putBitInBytes _putBitInBytes;

  double time_time() {
    _time_time ??=
        _dylib.lookupFunction<_c_time_time, _dart_time_time>('time_time');
    return _time_time();
  }

  _dart_time_time _time_time;

  void time_sleep(
    double seconds,
  ) {
    _time_sleep ??=
        _dylib.lookupFunction<_c_time_sleep, _dart_time_sleep>('time_sleep');
    return _time_sleep(
      seconds,
    );
  }

  _dart_time_sleep _time_sleep;

  void rawDumpWave() {
    _rawDumpWave ??=
        _dylib.lookupFunction<_c_rawDumpWave, _dart_rawDumpWave>('rawDumpWave');
    return _rawDumpWave();
  }

  _dart_rawDumpWave _rawDumpWave;

  void rawDumpScript(
    int script_id,
  ) {
    _rawDumpScript ??= _dylib
        .lookupFunction<_c_rawDumpScript, _dart_rawDumpScript>('rawDumpScript');
    return _rawDumpScript(
      script_id,
    );
  }

  _dart_rawDumpScript _rawDumpScript;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  ffi.Pointer<ffi.Void> __arg;

  ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {}

class _opaque_pthread_cond_t extends ffi.Struct {}

class _opaque_pthread_condattr_t extends ffi.Struct {}

class _opaque_pthread_mutex_t extends ffi.Struct {}

class _opaque_pthread_mutexattr_t extends ffi.Struct {}

class _opaque_pthread_once_t extends ffi.Struct {}

class _opaque_pthread_rwlock_t extends ffi.Struct {}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {}

class _opaque_pthread_t extends ffi.Struct {}

class sched_param extends ffi.Struct {}

class timespec extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int64()
  int tv_nsec;
}

class tm extends ffi.Struct {
  @ffi.Int32()
  int tm_sec;

  @ffi.Int32()
  int tm_min;

  @ffi.Int32()
  int tm_hour;

  @ffi.Int32()
  int tm_mday;

  @ffi.Int32()
  int tm_mon;

  @ffi.Int32()
  int tm_year;

  @ffi.Int32()
  int tm_wday;

  @ffi.Int32()
  int tm_yday;

  @ffi.Int32()
  int tm_isdst;

  @ffi.Int64()
  int tm_gmtoff;

  ffi.Pointer<ffi.Int8> tm_zone;
}

abstract class clockid_t {
  static const int _CLOCK_REALTIME = 0;
  static const int _CLOCK_MONOTONIC = 6;
  static const int _CLOCK_MONOTONIC_RAW = 4;
  static const int _CLOCK_MONOTONIC_RAW_APPROX = 5;
  static const int _CLOCK_UPTIME_RAW = 8;
  static const int _CLOCK_UPTIME_RAW_APPROX = 9;
  static const int _CLOCK_PROCESS_CPUTIME_ID = 12;
  static const int _CLOCK_THREAD_CPUTIME_ID = 16;
}

class pthread_override_s extends ffi.Struct {}

class gpioHeader_t extends ffi.Struct {
  @ffi.Uint16()
  int func;

  @ffi.Uint16()
  int size;
}

class gpioExtent_t extends ffi.Struct {
  @ffi.Uint64()
  int size;

  ffi.Pointer<ffi.Void> ptr;

  @ffi.Uint32()
  int data;
}

class gpioSample_t extends ffi.Struct {
  @ffi.Uint32()
  int tick;

  @ffi.Uint32()
  int level;
}

class gpioReport_t extends ffi.Struct {
  @ffi.Uint16()
  int seqno;

  @ffi.Uint16()
  int flags;

  @ffi.Uint32()
  int tick;

  @ffi.Uint32()
  int level;
}

class gpioPulse_t extends ffi.Struct {
  @ffi.Uint32()
  int gpioOn;

  @ffi.Uint32()
  int gpioOff;

  @ffi.Uint32()
  int usDelay;
}

class rawWave_t extends ffi.Struct {
  @ffi.Uint32()
  int gpioOn;

  @ffi.Uint32()
  int gpioOff;

  @ffi.Uint32()
  int usDelay;

  @ffi.Uint32()
  int flags;
}

class rawWaveInfo_t extends ffi.Struct {
  @ffi.Uint16()
  int botCB;

  @ffi.Uint16()
  int topCB;

  @ffi.Uint16()
  int botOOL;

  @ffi.Uint16()
  int topOOL;

  @ffi.Uint16()
  int deleted;

  @ffi.Uint16()
  int numCB;

  @ffi.Uint16()
  int numBOOL;

  @ffi.Uint16()
  int numTOOL;
}

class rawSPI_t extends ffi.Struct {
  @ffi.Int32()
  int clk;

  @ffi.Int32()
  int mosi;

  @ffi.Int32()
  int miso;

  @ffi.Int32()
  int ss_pol;

  @ffi.Int32()
  int ss_us;

  @ffi.Int32()
  int clk_pol;

  @ffi.Int32()
  int clk_pha;

  @ffi.Int32()
  int clk_us;
}

class rawCbs_t extends ffi.Struct {}

class pi_i2c_msg_t extends ffi.Struct {
  @ffi.Uint16()
  int addr;

  @ffi.Uint16()
  int flags;

  @ffi.Uint16()
  int len;

  ffi.Pointer<ffi.Uint8> buf;
}

class bsc_xfer_t extends ffi.Struct {}

const int QOS_CLASS_USER_INTERACTIVE = 33;

const int QOS_CLASS_USER_INITIATED = 25;

const int QOS_CLASS_DEFAULT = 21;

const int QOS_CLASS_UTILITY = 17;

const int QOS_CLASS_BACKGROUND = 9;

const int QOS_CLASS_UNSPECIFIED = 0;

const int __WORDSIZE = 64;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int _PTHREAD_MUTEX_SIG_init = 850045863;

const int _PTHREAD_ERRORCHECK_MUTEX_SIG_init = 850045857;

const int _PTHREAD_RECURSIVE_MUTEX_SIG_init = 850045858;

const int _PTHREAD_FIRSTFIT_MUTEX_SIG_init = 850045859;

const int _PTHREAD_COND_SIG_init = 1018212795;

const int _PTHREAD_ONCE_SIG_init = 816954554;

const int _PTHREAD_RWLOCK_SIG_init = 766030772;

const int SCHED_OTHER = 1;

const int SCHED_FIFO = 4;

const int SCHED_RR = 2;

const int __SCHED_PARAM_SIZE__ = 4;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __DRIVERKIT_19_0 = 190000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 101500;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 101500;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int NULL = 0;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 6;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_MONOTONIC_RAW_APPROX = 5;

const int CLOCK_UPTIME_RAW = 8;

const int CLOCK_UPTIME_RAW_APPROX = 9;

const int CLOCK_PROCESS_CPUTIME_ID = 12;

const int CLOCK_THREAD_CPUTIME_ID = 16;

const int QOS_MIN_RELATIVE_PRIORITY = -15;

const int PTHREAD_CREATE_JOINABLE = 1;

const int PTHREAD_CREATE_DETACHED = 2;

const int PTHREAD_INHERIT_SCHED = 1;

const int PTHREAD_EXPLICIT_SCHED = 2;

const int PTHREAD_CANCEL_ENABLE = 1;

const int PTHREAD_CANCEL_DISABLE = 0;

const int PTHREAD_CANCEL_DEFERRED = 2;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 0;

const int PTHREAD_SCOPE_SYSTEM = 1;

const int PTHREAD_SCOPE_PROCESS = 2;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_PROCESS_PRIVATE = 2;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_ERRORCHECK = 1;

const int PTHREAD_MUTEX_RECURSIVE = 2;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_POLICY_FAIRSHARE_NP = 1;

const int PTHREAD_MUTEX_POLICY_FIRSTFIT_NP = 3;

const int PIGPIO_VERSION = 78;

const String PI_INPFIFO = '/dev/pigpio';

const String PI_OUTFIFO = '/dev/pigout';

const String PI_ERRFIFO = '/dev/pigerr';

const String PI_ENVPORT = 'PIGPIO_PORT';

const String PI_ENVADDR = 'PIGPIO_ADDR';

const String PI_LOCKFILE = '/var/run/pigpio.pid';

const String PI_I2C_COMBINED = '/sys/module/i2c_bcm2708/parameters/combined';

const int WAVE_FLAG_READ = 1;

const int WAVE_FLAG_TICK = 2;

const int BSC_FIFO_SIZE = 512;

const int PI_MIN_GPIO = 0;

const int PI_MAX_GPIO = 53;

const int PI_MAX_USER_GPIO = 31;

const int PI_OFF = 0;

const int PI_ON = 1;

const int PI_CLEAR = 0;

const int PI_SET = 1;

const int PI_LOW = 0;

const int PI_HIGH = 1;

const int PI_TIMEOUT = 2;

const int PI_INPUT = 0;

const int PI_OUTPUT = 1;

const int PI_ALT0 = 4;

const int PI_ALT1 = 5;

const int PI_ALT2 = 6;

const int PI_ALT3 = 7;

const int PI_ALT4 = 3;

const int PI_ALT5 = 2;

const int PI_PUD_OFF = 0;

const int PI_PUD_DOWN = 1;

const int PI_PUD_UP = 2;

const int PI_DEFAULT_DUTYCYCLE_RANGE = 255;

const int PI_MIN_DUTYCYCLE_RANGE = 25;

const int PI_MAX_DUTYCYCLE_RANGE = 40000;

const int PI_SERVO_OFF = 0;

const int PI_MIN_SERVO_PULSEWIDTH = 500;

const int PI_MAX_SERVO_PULSEWIDTH = 2500;

const int PI_HW_PWM_MIN_FREQ = 1;

const int PI_HW_PWM_MAX_FREQ = 125000000;

const int PI_HW_PWM_MAX_FREQ_2711 = 187500000;

const int PI_HW_PWM_RANGE = 1000000;

const int PI_HW_CLK_MIN_FREQ = 4689;

const int PI_HW_CLK_MIN_FREQ_2711 = 13184;

const int PI_HW_CLK_MAX_FREQ = 250000000;

const int PI_HW_CLK_MAX_FREQ_2711 = 375000000;

const int PI_NOTIFY_SLOTS = 32;

const int PI_NTFY_FLAGS_EVENT = 128;

const int PI_NTFY_FLAGS_ALIVE = 64;

const int PI_NTFY_FLAGS_WDOG = 32;

const int PI_WAVE_BLOCKS = 4;

const int PI_WAVE_MAX_PULSES = 12000;

const int PI_WAVE_MAX_CHARS = 1200;

const int PI_BB_I2C_MIN_BAUD = 50;

const int PI_BB_I2C_MAX_BAUD = 500000;

const int PI_BB_SPI_MIN_BAUD = 50;

const int PI_BB_SPI_MAX_BAUD = 250000;

const int PI_BB_SER_MIN_BAUD = 50;

const int PI_BB_SER_MAX_BAUD = 250000;

const int PI_BB_SER_NORMAL = 0;

const int PI_BB_SER_INVERT = 1;

const int PI_WAVE_MIN_BAUD = 50;

const int PI_WAVE_MAX_BAUD = 1000000;

const int PI_SPI_MIN_BAUD = 32000;

const int PI_SPI_MAX_BAUD = 125000000;

const int PI_MIN_WAVE_DATABITS = 1;

const int PI_MAX_WAVE_DATABITS = 32;

const int PI_MIN_WAVE_HALFSTOPBITS = 2;

const int PI_MAX_WAVE_HALFSTOPBITS = 8;

const int PI_WAVE_MAX_MICROS = 1800000000;

const int PI_MAX_WAVES = 250;

const int PI_MAX_WAVE_CYCLES = 65535;

const int PI_MAX_WAVE_DELAY = 65535;

const int PI_WAVE_COUNT_PAGES = 10;

const int PI_WAVE_MODE_ONE_SHOT = 0;

const int PI_WAVE_MODE_REPEAT = 1;

const int PI_WAVE_MODE_ONE_SHOT_SYNC = 2;

const int PI_WAVE_MODE_REPEAT_SYNC = 3;

const int PI_WAVE_NOT_FOUND = 9998;

const int PI_NO_TX_WAVE = 9999;

const int PI_FILE_SLOTS = 16;

const int PI_I2C_SLOTS = 512;

const int PI_SPI_SLOTS = 32;

const int PI_SER_SLOTS = 16;

const int PI_MAX_I2C_ADDR = 127;

const int PI_NUM_AUX_SPI_CHANNEL = 3;

const int PI_NUM_STD_SPI_CHANNEL = 2;

const int PI_MAX_I2C_DEVICE_COUNT = 65536;

const int PI_MAX_SPI_DEVICE_COUNT = 65536;

const int PI_I2C_RDRW_IOCTL_MAX_MSGS = 42;

const int PI_I2C_M_WR = 0;

const int PI_I2C_M_RD = 1;

const int PI_I2C_M_TEN = 16;

const int PI_I2C_M_RECV_LEN = 1024;

const int PI_I2C_M_NO_RD_ACK = 2048;

const int PI_I2C_M_IGNORE_NAK = 4096;

const int PI_I2C_M_REV_DIR_ADDR = 8192;

const int PI_I2C_M_NOSTART = 16384;

const int PI_I2C_END = 0;

const int PI_I2C_ESC = 1;

const int PI_I2C_START = 2;

const int PI_I2C_COMBINED_ON = 2;

const int PI_I2C_STOP = 3;

const int PI_I2C_COMBINED_OFF = 3;

const int PI_I2C_ADDR = 4;

const int PI_I2C_FLAGS = 5;

const int PI_I2C_READ = 6;

const int PI_I2C_WRITE = 7;

const int BSC_DR = 0;

const int BSC_RSR = 1;

const int BSC_SLV = 2;

const int BSC_CR = 3;

const int BSC_FR = 4;

const int BSC_IFLS = 5;

const int BSC_IMSC = 6;

const int BSC_RIS = 7;

const int BSC_MIS = 8;

const int BSC_ICR = 9;

const int BSC_DMACR = 10;

const int BSC_TDR = 11;

const int BSC_GPUSTAT = 12;

const int BSC_HCTRL = 13;

const int BSC_DEBUG_I2C = 14;

const int BSC_DEBUG_SPI = 15;

const int BSC_CR_TESTFIFO = 2048;

const int BSC_CR_RXE = 512;

const int BSC_CR_TXE = 256;

const int BSC_CR_BRK = 128;

const int BSC_CR_CPOL = 16;

const int BSC_CR_CPHA = 8;

const int BSC_CR_I2C = 4;

const int BSC_CR_SPI = 2;

const int BSC_CR_EN = 1;

const int BSC_FR_RXBUSY = 32;

const int BSC_FR_TXFE = 16;

const int BSC_FR_RXFF = 8;

const int BSC_FR_TXFF = 4;

const int BSC_FR_RXFE = 2;

const int BSC_FR_TXBUSY = 1;

const int BSC_SDA_MOSI = 18;

const int BSC_SCL_SCLK = 19;

const int BSC_MISO = 20;

const int BSC_CE_N = 21;

const int BSC_SDA_MOSI_2711 = 10;

const int BSC_SCL_SCLK_2711 = 11;

const int BSC_MISO_2711 = 9;

const int BSC_CE_N_2711 = 8;

const int PI_MAX_BUSY_DELAY = 100;

const int PI_MIN_WDOG_TIMEOUT = 0;

const int PI_MAX_WDOG_TIMEOUT = 60000;

const int PI_MIN_TIMER = 0;

const int PI_MAX_TIMER = 9;

const int PI_MIN_MS = 10;

const int PI_MAX_MS = 60000;

const int PI_MAX_SCRIPTS = 32;

const int PI_MAX_SCRIPT_TAGS = 50;

const int PI_MAX_SCRIPT_VARS = 150;

const int PI_MAX_SCRIPT_PARAMS = 10;

const int PI_SCRIPT_INITING = 0;

const int PI_SCRIPT_HALTED = 1;

const int PI_SCRIPT_RUNNING = 2;

const int PI_SCRIPT_WAITING = 3;

const int PI_SCRIPT_FAILED = 4;

const int PI_MIN_SIGNUM = 0;

const int PI_MAX_SIGNUM = 63;

const int PI_TIME_RELATIVE = 0;

const int PI_TIME_ABSOLUTE = 1;

const int PI_MAX_MICS_DELAY = 1000000;

const int PI_MAX_MILS_DELAY = 60000;

const int PI_BUF_MILLIS_MIN = 100;

const int PI_BUF_MILLIS_MAX = 10000;

const int PI_CLOCK_PWM = 0;

const int PI_CLOCK_PCM = 1;

const int PI_MIN_DMA_CHANNEL = 0;

const int PI_MAX_DMA_CHANNEL = 15;

const int PI_MIN_SOCKET_PORT = 1024;

const int PI_MAX_SOCKET_PORT = 32000;

const int PI_DISABLE_FIFO_IF = 1;

const int PI_DISABLE_SOCK_IF = 2;

const int PI_LOCALHOST_SOCK_IF = 4;

const int PI_DISABLE_ALERT = 8;

const int PI_MEM_ALLOC_AUTO = 0;

const int PI_MEM_ALLOC_PAGEMAP = 1;

const int PI_MEM_ALLOC_MAILBOX = 2;

const int PI_MAX_STEADY = 300000;

const int PI_MAX_ACTIVE = 1000000;

const int PI_CFG_DBG_LEVEL = 0;

const int PI_CFG_ALERT_FREQ = 4;

const int PI_CFG_RT_PRIORITY = 256;

const int PI_CFG_STATS = 512;

const int PI_CFG_NOSIGHANDLER = 1024;

const int PI_CFG_ILLEGAL_VAL = 2048;

const int RISING_EDGE = 0;

const int FALLING_EDGE = 1;

const int EITHER_EDGE = 2;

const int PI_MAX_PAD = 2;

const int PI_MIN_PAD_STRENGTH = 1;

const int PI_MAX_PAD_STRENGTH = 16;

const int PI_FILE_NONE = 0;

const int PI_FILE_MIN = 1;

const int PI_FILE_READ = 1;

const int PI_FILE_WRITE = 2;

const int PI_FILE_RW = 3;

const int PI_FILE_APPEND = 4;

const int PI_FILE_CREATE = 8;

const int PI_FILE_TRUNC = 16;

const int PI_FILE_MAX = 31;

const int PI_FROM_START = 0;

const int PI_FROM_CURRENT = 1;

const int PI_FROM_END = 2;

const int MAX_CONNECT_ADDRESSES = 256;

const int PI_MAX_EVENT = 31;

const int PI_EVENT_BSC = 31;

const int PI_CMD_MODES = 0;

const int PI_CMD_MODEG = 1;

const int PI_CMD_PUD = 2;

const int PI_CMD_READ = 3;

const int PI_CMD_WRITE = 4;

const int PI_CMD_PWM = 5;

const int PI_CMD_PRS = 6;

const int PI_CMD_PFS = 7;

const int PI_CMD_SERVO = 8;

const int PI_CMD_WDOG = 9;

const int PI_CMD_BR1 = 10;

const int PI_CMD_BR2 = 11;

const int PI_CMD_BC1 = 12;

const int PI_CMD_BC2 = 13;

const int PI_CMD_BS1 = 14;

const int PI_CMD_BS2 = 15;

const int PI_CMD_TICK = 16;

const int PI_CMD_HWVER = 17;

const int PI_CMD_NO = 18;

const int PI_CMD_NB = 19;

const int PI_CMD_NP = 20;

const int PI_CMD_NC = 21;

const int PI_CMD_PRG = 22;

const int PI_CMD_PFG = 23;

const int PI_CMD_PRRG = 24;

const int PI_CMD_HELP = 25;

const int PI_CMD_PIGPV = 26;

const int PI_CMD_WVCLR = 27;

const int PI_CMD_WVAG = 28;

const int PI_CMD_WVAS = 29;

const int PI_CMD_WVGO = 30;

const int PI_CMD_WVGOR = 31;

const int PI_CMD_WVBSY = 32;

const int PI_CMD_WVHLT = 33;

const int PI_CMD_WVSM = 34;

const int PI_CMD_WVSP = 35;

const int PI_CMD_WVSC = 36;

const int PI_CMD_TRIG = 37;

const int PI_CMD_PROC = 38;

const int PI_CMD_PROCD = 39;

const int PI_CMD_PROCR = 40;

const int PI_CMD_PROCS = 41;

const int PI_CMD_SLRO = 42;

const int PI_CMD_SLR = 43;

const int PI_CMD_SLRC = 44;

const int PI_CMD_PROCP = 45;

const int PI_CMD_MICS = 46;

const int PI_CMD_MILS = 47;

const int PI_CMD_PARSE = 48;

const int PI_CMD_WVCRE = 49;

const int PI_CMD_WVDEL = 50;

const int PI_CMD_WVTX = 51;

const int PI_CMD_WVTXR = 52;

const int PI_CMD_WVNEW = 53;

const int PI_CMD_I2CO = 54;

const int PI_CMD_I2CC = 55;

const int PI_CMD_I2CRD = 56;

const int PI_CMD_I2CWD = 57;

const int PI_CMD_I2CWQ = 58;

const int PI_CMD_I2CRS = 59;

const int PI_CMD_I2CWS = 60;

const int PI_CMD_I2CRB = 61;

const int PI_CMD_I2CWB = 62;

const int PI_CMD_I2CRW = 63;

const int PI_CMD_I2CWW = 64;

const int PI_CMD_I2CRK = 65;

const int PI_CMD_I2CWK = 66;

const int PI_CMD_I2CRI = 67;

const int PI_CMD_I2CWI = 68;

const int PI_CMD_I2CPC = 69;

const int PI_CMD_I2CPK = 70;

const int PI_CMD_SPIO = 71;

const int PI_CMD_SPIC = 72;

const int PI_CMD_SPIR = 73;

const int PI_CMD_SPIW = 74;

const int PI_CMD_SPIX = 75;

const int PI_CMD_SERO = 76;

const int PI_CMD_SERC = 77;

const int PI_CMD_SERRB = 78;

const int PI_CMD_SERWB = 79;

const int PI_CMD_SERR = 80;

const int PI_CMD_SERW = 81;

const int PI_CMD_SERDA = 82;

const int PI_CMD_GDC = 83;

const int PI_CMD_GPW = 84;

const int PI_CMD_HC = 85;

const int PI_CMD_HP = 86;

const int PI_CMD_CF1 = 87;

const int PI_CMD_CF2 = 88;

const int PI_CMD_BI2CC = 89;

const int PI_CMD_BI2CO = 90;

const int PI_CMD_BI2CZ = 91;

const int PI_CMD_I2CZ = 92;

const int PI_CMD_WVCHA = 93;

const int PI_CMD_SLRI = 94;

const int PI_CMD_CGI = 95;

const int PI_CMD_CSI = 96;

const int PI_CMD_FG = 97;

const int PI_CMD_FN = 98;

const int PI_CMD_NOIB = 99;

const int PI_CMD_WVTXM = 100;

const int PI_CMD_WVTAT = 101;

const int PI_CMD_PADS = 102;

const int PI_CMD_PADG = 103;

const int PI_CMD_FO = 104;

const int PI_CMD_FC = 105;

const int PI_CMD_FR = 106;

const int PI_CMD_FW = 107;

const int PI_CMD_FS = 108;

const int PI_CMD_FL = 109;

const int PI_CMD_SHELL = 110;

const int PI_CMD_BSPIC = 111;

const int PI_CMD_BSPIO = 112;

const int PI_CMD_BSPIX = 113;

const int PI_CMD_BSCX = 114;

const int PI_CMD_EVM = 115;

const int PI_CMD_EVT = 116;

const int PI_CMD_PROCU = 117;

const int PI_CMD_WVCAP = 118;

const int PI_CMD_SCRIPT = 800;

const int PI_CMD_ADD = 800;

const int PI_CMD_AND = 801;

const int PI_CMD_CALL = 802;

const int PI_CMD_CMDR = 803;

const int PI_CMD_CMDW = 804;

const int PI_CMD_CMP = 805;

const int PI_CMD_DCR = 806;

const int PI_CMD_DCRA = 807;

const int PI_CMD_DIV = 808;

const int PI_CMD_HALT = 809;

const int PI_CMD_INR = 810;

const int PI_CMD_INRA = 811;

const int PI_CMD_JM = 812;

const int PI_CMD_JMP = 813;

const int PI_CMD_JNZ = 814;

const int PI_CMD_JP = 815;

const int PI_CMD_JZ = 816;

const int PI_CMD_TAG = 817;

const int PI_CMD_LD = 818;

const int PI_CMD_LDA = 819;

const int PI_CMD_LDAB = 820;

const int PI_CMD_MLT = 821;

const int PI_CMD_MOD = 822;

const int PI_CMD_NOP = 823;

const int PI_CMD_OR = 824;

const int PI_CMD_POP = 825;

const int PI_CMD_POPA = 826;

const int PI_CMD_PUSH = 827;

const int PI_CMD_PUSHA = 828;

const int PI_CMD_RET = 829;

const int PI_CMD_RL = 830;

const int PI_CMD_RLA = 831;

const int PI_CMD_RR = 832;

const int PI_CMD_RRA = 833;

const int PI_CMD_STA = 834;

const int PI_CMD_STAB = 835;

const int PI_CMD_SUB = 836;

const int PI_CMD_SYS = 837;

const int PI_CMD_WAIT = 838;

const int PI_CMD_X = 839;

const int PI_CMD_XA = 840;

const int PI_CMD_XOR = 841;

const int PI_CMD_EVTWT = 842;

const int PI_INIT_FAILED = -1;

const int PI_BAD_USER_GPIO = -2;

const int PI_BAD_GPIO = -3;

const int PI_BAD_MODE = -4;

const int PI_BAD_LEVEL = -5;

const int PI_BAD_PUD = -6;

const int PI_BAD_PULSEWIDTH = -7;

const int PI_BAD_DUTYCYCLE = -8;

const int PI_BAD_TIMER = -9;

const int PI_BAD_MS = -10;

const int PI_BAD_TIMETYPE = -11;

const int PI_BAD_SECONDS = -12;

const int PI_BAD_MICROS = -13;

const int PI_TIMER_FAILED = -14;

const int PI_BAD_WDOG_TIMEOUT = -15;

const int PI_NO_ALERT_FUNC = -16;

const int PI_BAD_CLK_PERIPH = -17;

const int PI_BAD_CLK_SOURCE = -18;

const int PI_BAD_CLK_MICROS = -19;

const int PI_BAD_BUF_MILLIS = -20;

const int PI_BAD_DUTYRANGE = -21;

const int PI_BAD_DUTY_RANGE = -21;

const int PI_BAD_SIGNUM = -22;

const int PI_BAD_PATHNAME = -23;

const int PI_NO_HANDLE = -24;

const int PI_BAD_HANDLE = -25;

const int PI_BAD_IF_FLAGS = -26;

const int PI_BAD_CHANNEL = -27;

const int PI_BAD_PRIM_CHANNEL = -27;

const int PI_BAD_SOCKET_PORT = -28;

const int PI_BAD_FIFO_COMMAND = -29;

const int PI_BAD_SECO_CHANNEL = -30;

const int PI_NOT_INITIALISED = -31;

const int PI_INITIALISED = -32;

const int PI_BAD_WAVE_MODE = -33;

const int PI_BAD_CFG_INTERNAL = -34;

const int PI_BAD_WAVE_BAUD = -35;

const int PI_TOO_MANY_PULSES = -36;

const int PI_TOO_MANY_CHARS = -37;

const int PI_NOT_SERIAL_GPIO = -38;

const int PI_BAD_SERIAL_STRUC = -39;

const int PI_BAD_SERIAL_BUF = -40;

const int PI_NOT_PERMITTED = -41;

const int PI_SOME_PERMITTED = -42;

const int PI_BAD_WVSC_COMMND = -43;

const int PI_BAD_WVSM_COMMND = -44;

const int PI_BAD_WVSP_COMMND = -45;

const int PI_BAD_PULSELEN = -46;

const int PI_BAD_SCRIPT = -47;

const int PI_BAD_SCRIPT_ID = -48;

const int PI_BAD_SER_OFFSET = -49;

const int PI_GPIO_IN_USE = -50;

const int PI_BAD_SERIAL_COUNT = -51;

const int PI_BAD_PARAM_NUM = -52;

const int PI_DUP_TAG = -53;

const int PI_TOO_MANY_TAGS = -54;

const int PI_BAD_SCRIPT_CMD = -55;

const int PI_BAD_VAR_NUM = -56;

const int PI_NO_SCRIPT_ROOM = -57;

const int PI_NO_MEMORY = -58;

const int PI_SOCK_READ_FAILED = -59;

const int PI_SOCK_WRIT_FAILED = -60;

const int PI_TOO_MANY_PARAM = -61;

const int PI_NOT_HALTED = -62;

const int PI_SCRIPT_NOT_READY = -62;

const int PI_BAD_TAG = -63;

const int PI_BAD_MICS_DELAY = -64;

const int PI_BAD_MILS_DELAY = -65;

const int PI_BAD_WAVE_ID = -66;

const int PI_TOO_MANY_CBS = -67;

const int PI_TOO_MANY_OOL = -68;

const int PI_EMPTY_WAVEFORM = -69;

const int PI_NO_WAVEFORM_ID = -70;

const int PI_I2C_OPEN_FAILED = -71;

const int PI_SER_OPEN_FAILED = -72;

const int PI_SPI_OPEN_FAILED = -73;

const int PI_BAD_I2C_BUS = -74;

const int PI_BAD_I2C_ADDR = -75;

const int PI_BAD_SPI_CHANNEL = -76;

const int PI_BAD_FLAGS = -77;

const int PI_BAD_SPI_SPEED = -78;

const int PI_BAD_SER_DEVICE = -79;

const int PI_BAD_SER_SPEED = -80;

const int PI_BAD_PARAM = -81;

const int PI_I2C_WRITE_FAILED = -82;

const int PI_I2C_READ_FAILED = -83;

const int PI_BAD_SPI_COUNT = -84;

const int PI_SER_WRITE_FAILED = -85;

const int PI_SER_READ_FAILED = -86;

const int PI_SER_READ_NO_DATA = -87;

const int PI_UNKNOWN_COMMAND = -88;

const int PI_SPI_XFER_FAILED = -89;

const int PI_BAD_POINTER = -90;

const int PI_NO_AUX_SPI = -91;

const int PI_NOT_PWM_GPIO = -92;

const int PI_NOT_SERVO_GPIO = -93;

const int PI_NOT_HCLK_GPIO = -94;

const int PI_NOT_HPWM_GPIO = -95;

const int PI_BAD_HPWM_FREQ = -96;

const int PI_BAD_HPWM_DUTY = -97;

const int PI_BAD_HCLK_FREQ = -98;

const int PI_BAD_HCLK_PASS = -99;

const int PI_HPWM_ILLEGAL = -100;

const int PI_BAD_DATABITS = -101;

const int PI_BAD_STOPBITS = -102;

const int PI_MSG_TOOBIG = -103;

const int PI_BAD_MALLOC_MODE = -104;

const int PI_TOO_MANY_SEGS = -105;

const int PI_BAD_I2C_SEG = -106;

const int PI_BAD_SMBUS_CMD = -107;

const int PI_NOT_I2C_GPIO = -108;

const int PI_BAD_I2C_WLEN = -109;

const int PI_BAD_I2C_RLEN = -110;

const int PI_BAD_I2C_CMD = -111;

const int PI_BAD_I2C_BAUD = -112;

const int PI_CHAIN_LOOP_CNT = -113;

const int PI_BAD_CHAIN_LOOP = -114;

const int PI_CHAIN_COUNTER = -115;

const int PI_BAD_CHAIN_CMD = -116;

const int PI_BAD_CHAIN_DELAY = -117;

const int PI_CHAIN_NESTING = -118;

const int PI_CHAIN_TOO_BIG = -119;

const int PI_DEPRECATED = -120;

const int PI_BAD_SER_INVERT = -121;

const int PI_BAD_EDGE = -122;

const int PI_BAD_ISR_INIT = -123;

const int PI_BAD_FOREVER = -124;

const int PI_BAD_FILTER = -125;

const int PI_BAD_PAD = -126;

const int PI_BAD_STRENGTH = -127;

const int PI_FIL_OPEN_FAILED = -128;

const int PI_BAD_FILE_MODE = -129;

const int PI_BAD_FILE_FLAG = -130;

const int PI_BAD_FILE_READ = -131;

const int PI_BAD_FILE_WRITE = -132;

const int PI_FILE_NOT_ROPEN = -133;

const int PI_FILE_NOT_WOPEN = -134;

const int PI_BAD_FILE_SEEK = -135;

const int PI_NO_FILE_MATCH = -136;

const int PI_NO_FILE_ACCESS = -137;

const int PI_FILE_IS_A_DIR = -138;

const int PI_BAD_SHELL_STATUS = -139;

const int PI_BAD_SCRIPT_NAME = -140;

const int PI_BAD_SPI_BAUD = -141;

const int PI_NOT_SPI_GPIO = -142;

const int PI_BAD_EVENT_ID = -143;

const int PI_CMD_INTERRUPTED = -144;

const int PI_NOT_ON_BCM2711 = -145;

const int PI_ONLY_ON_BCM2711 = -146;

const int PI_PIGIF_ERR_0 = -2000;

const int PI_PIGIF_ERR_99 = -2099;

const int PI_CUSTOM_ERR_0 = -3000;

const int PI_CUSTOM_ERR_999 = -3999;

const int PI_DEFAULT_BUFFER_MILLIS = 120;

const int PI_DEFAULT_CLK_MICROS = 5;

const int PI_DEFAULT_CLK_PERIPHERAL = 1;

const int PI_DEFAULT_IF_FLAGS = 0;

const int PI_DEFAULT_FOREGROUND = 0;

const int PI_DEFAULT_DMA_CHANNEL = 14;

const int PI_DEFAULT_DMA_PRIMARY_CHANNEL = 14;

const int PI_DEFAULT_DMA_SECONDARY_CHANNEL = 6;

const int PI_DEFAULT_DMA_PRIMARY_CH_2711 = 7;

const int PI_DEFAULT_DMA_SECONDARY_CH_2711 = 6;

const int PI_DEFAULT_DMA_NOT_SET = 15;

const int PI_DEFAULT_SOCKET_PORT = 8888;

const String PI_DEFAULT_SOCKET_PORT_STR = '8888';

const String PI_DEFAULT_SOCKET_ADDR_STR = 'localhost';

const int PI_DEFAULT_UPDATE_MASK_UNKNOWN = 268435452;

const int PI_DEFAULT_UPDATE_MASK_B1 = 65523603;

const int PI_DEFAULT_UPDATE_MASK_A_B2 = 4224176028;

const int PI_DEFAULT_UPDATE_MASK_APLUS_BPLUS = 141046994436092;

const int PI_DEFAULT_UPDATE_MASK_ZERO = 140737756790780;

const int PI_DEFAULT_UPDATE_MASK_PI2B = 141046994436092;

const int PI_DEFAULT_UPDATE_MASK_PI3B = 268435452;

const int PI_DEFAULT_UPDATE_MASK_PI4B = 268435452;

const int PI_DEFAULT_UPDATE_MASK_COMPUTE = 281474976710655;

const int PI_DEFAULT_MEM_ALLOC_MODE = 0;

const int PI_DEFAULT_CFG_INTERNALS = 0;

typedef _c_sched_yield = ffi.Int32 Function();

typedef _dart_sched_yield = int Function();

typedef _c_sched_get_priority_min = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_sched_get_priority_min = int Function(
  int arg0,
);

typedef _c_sched_get_priority_max = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_sched_get_priority_max = int Function(
  int arg0,
);

typedef _c_asctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> arg0,
);

typedef _dart_asctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> arg0,
);

typedef _c_clock = ffi.Uint64 Function();

typedef _dart_clock = int Function();

typedef _c_ctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _dart_ctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _c_difftime = ffi.Double Function(
  ffi.Int64 arg0,
  ffi.Int64 arg1,
);

typedef _dart_difftime = double Function(
  int arg0,
  int arg1,
);

typedef _c_getdate = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_getdate = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_gmtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _dart_gmtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _c_localtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _dart_localtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _c_mktime = ffi.Int64 Function(
  ffi.Pointer<tm> arg0,
);

typedef _dart_mktime = int Function(
  ffi.Pointer<tm> arg0,
);

typedef _c_strftime = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<tm> arg3,
);

typedef _dart_strftime = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<tm> arg3,
);

typedef _c_strptime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<tm> arg2,
);

typedef _dart_strptime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<tm> arg2,
);

typedef _c_time = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _dart_time = int Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _c_tzset = ffi.Void Function();

typedef _dart_tzset = void Function();

typedef _c_asctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_asctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_ctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_ctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_gmtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<tm> arg1,
);

typedef _dart_gmtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<tm> arg1,
);

typedef _c_localtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<tm> arg1,
);

typedef _dart_localtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<tm> arg1,
);

typedef _c_posix2time = ffi.Int64 Function(
  ffi.Int64 arg0,
);

typedef _dart_posix2time = int Function(
  int arg0,
);

typedef _c_tzsetwall = ffi.Void Function();

typedef _dart_tzsetwall = void Function();

typedef _c_time2posix = ffi.Int64 Function(
  ffi.Int64 arg0,
);

typedef _dart_time2posix = int Function(
  int arg0,
);

typedef _c_timelocal = ffi.Int64 Function(
  ffi.Pointer<tm> arg0,
);

typedef _dart_timelocal = int Function(
  ffi.Pointer<tm> arg0,
);

typedef _c_timegm = ffi.Int64 Function(
  ffi.Pointer<tm> arg0,
);

typedef _dart_timegm = int Function(
  ffi.Pointer<tm> arg0,
);

typedef _c_nanosleep = ffi.Int32 Function(
  ffi.Pointer<timespec> __rqtp,
  ffi.Pointer<timespec> __rmtp,
);

typedef _dart_nanosleep = int Function(
  ffi.Pointer<timespec> __rqtp,
  ffi.Pointer<timespec> __rmtp,
);

typedef _c_clock_getres = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __res,
);

typedef _dart_clock_getres = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __res,
);

typedef _c_clock_gettime = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _dart_clock_gettime = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _c_clock_gettime_nsec_np = ffi.Uint64 Function(
  ffi.Int32 __clock_id,
);

typedef _dart_clock_gettime_nsec_np = int Function(
  int __clock_id,
);

typedef _c_clock_settime = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _dart_clock_settime = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _c_timespec_get = ffi.Int32 Function(
  ffi.Pointer<timespec> ts,
  ffi.Int32 base,
);

typedef _dart_timespec_get = int Function(
  ffi.Pointer<timespec> ts,
  int base,
);

typedef _c_qos_class_self = ffi.Uint32 Function();

typedef _dart_qos_class_self = int Function();

typedef _c_qos_class_main = ffi.Uint32 Function();

typedef _dart_qos_class_main = int Function();

typedef _c_pthread_attr_set_qos_class_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> __attr,
  ffi.Uint32 __qos_class,
  ffi.Int32 __relative_priority,
);

typedef _dart_pthread_attr_set_qos_class_np = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> __attr,
  int __qos_class,
  int __relative_priority,
);

typedef _c_pthread_attr_get_qos_class_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> __attr,
  ffi.Pointer<ffi.Uint32> __qos_class,
  ffi.Pointer<ffi.Int32> __relative_priority,
);

typedef _dart_pthread_attr_get_qos_class_np = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> __attr,
  ffi.Pointer<ffi.Uint32> __qos_class,
  ffi.Pointer<ffi.Int32> __relative_priority,
);

typedef _c_pthread_set_qos_class_self_np = ffi.Int32 Function(
  ffi.Uint32 __qos_class,
  ffi.Int32 __relative_priority,
);

typedef _dart_pthread_set_qos_class_self_np = int Function(
  int __qos_class,
  int __relative_priority,
);

typedef _c_pthread_get_qos_class_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> __pthread,
  ffi.Pointer<ffi.Uint32> __qos_class,
  ffi.Pointer<ffi.Int32> __relative_priority,
);

typedef _dart_pthread_get_qos_class_np = int Function(
  ffi.Pointer<_opaque_pthread_t> __pthread,
  ffi.Pointer<ffi.Uint32> __qos_class,
  ffi.Pointer<ffi.Int32> __relative_priority,
);

typedef _c_pthread_override_qos_class_start_np = ffi.Pointer<pthread_override_s>
    Function(
  ffi.Pointer<_opaque_pthread_t> __pthread,
  ffi.Uint32 __qos_class,
  ffi.Int32 __relative_priority,
);

typedef _dart_pthread_override_qos_class_start_np
    = ffi.Pointer<pthread_override_s> Function(
  ffi.Pointer<_opaque_pthread_t> __pthread,
  int __qos_class,
  int __relative_priority,
);

typedef _c_pthread_override_qos_class_end_np = ffi.Int32 Function(
  ffi.Pointer<pthread_override_s> __override,
);

typedef _dart_pthread_override_qos_class_end_np = int Function(
  ffi.Pointer<pthread_override_s> __override,
);

typedef _typedefC_2 = ffi.Void Function();

typedef _typedefC_3 = ffi.Void Function();

typedef _typedefC_4 = ffi.Void Function();

typedef _c_pthread_atfork = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> arg2,
);

typedef _dart_pthread_atfork = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> arg2,
);

typedef _c_pthread_attr_destroy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
);

typedef _dart_pthread_attr_destroy = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
);

typedef _c_pthread_attr_getdetachstate = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_attr_getdetachstate = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_attr_getguardsize = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _dart_pthread_attr_getguardsize = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _c_pthread_attr_getinheritsched = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_attr_getinheritsched = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_attr_getschedparam = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<sched_param> arg1,
);

typedef _dart_pthread_attr_getschedparam = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<sched_param> arg1,
);

typedef _c_pthread_attr_getschedpolicy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_attr_getschedpolicy = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_attr_getscope = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_attr_getscope = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_attr_getstack = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _dart_pthread_attr_getstack = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _c_pthread_attr_getstackaddr = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
);

typedef _dart_pthread_attr_getstackaddr = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
);

typedef _c_pthread_attr_getstacksize = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _dart_pthread_attr_getstacksize = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _c_pthread_attr_init = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
);

typedef _dart_pthread_attr_init = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
);

typedef _c_pthread_attr_setdetachstate = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_attr_setdetachstate = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  int arg1,
);

typedef _c_pthread_attr_setguardsize = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_pthread_attr_setguardsize = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  int arg1,
);

typedef _c_pthread_attr_setinheritsched = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_attr_setinheritsched = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  int arg1,
);

typedef _c_pthread_attr_setschedparam = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<sched_param> arg1,
);

typedef _dart_pthread_attr_setschedparam = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<sched_param> arg1,
);

typedef _c_pthread_attr_setschedpolicy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_attr_setschedpolicy = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  int arg1,
);

typedef _c_pthread_attr_setscope = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_attr_setscope = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  int arg1,
);

typedef _c_pthread_attr_setstack = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_pthread_attr_setstack = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_pthread_attr_setstackaddr = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_pthread_attr_setstackaddr = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_pthread_attr_setstacksize = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_pthread_attr_setstacksize = int Function(
  ffi.Pointer<_opaque_pthread_attr_t> arg0,
  int arg1,
);

typedef _c_pthread_cancel = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _dart_pthread_cancel = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _c_pthread_cond_broadcast = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
);

typedef _dart_pthread_cond_broadcast = int Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
);

typedef _c_pthread_cond_destroy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
);

typedef _dart_pthread_cond_destroy = int Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
);

typedef _c_pthread_cond_init = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_condattr_t> arg1,
);

typedef _dart_pthread_cond_init = int Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_condattr_t> arg1,
);

typedef _c_pthread_cond_signal = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
);

typedef _dart_pthread_cond_signal = int Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
);

typedef _c_pthread_cond_timedwait = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_mutex_t> arg1,
  ffi.Pointer<timespec> arg2,
);

typedef _dart_pthread_cond_timedwait = int Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_mutex_t> arg1,
  ffi.Pointer<timespec> arg2,
);

typedef _c_pthread_cond_wait = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_mutex_t> arg1,
);

typedef _dart_pthread_cond_wait = int Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_mutex_t> arg1,
);

typedef _c_pthread_condattr_destroy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_condattr_t> arg0,
);

typedef _dart_pthread_condattr_destroy = int Function(
  ffi.Pointer<_opaque_pthread_condattr_t> arg0,
);

typedef _c_pthread_condattr_init = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_condattr_t> arg0,
);

typedef _dart_pthread_condattr_init = int Function(
  ffi.Pointer<_opaque_pthread_condattr_t> arg0,
);

typedef _c_pthread_condattr_getpshared = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_condattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_condattr_getpshared = int Function(
  ffi.Pointer<_opaque_pthread_condattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_condattr_setpshared = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_condattr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_condattr_setpshared = int Function(
  ffi.Pointer<_opaque_pthread_condattr_t> arg0,
  int arg1,
);

typedef _typedefC_5 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_pthread_create = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_opaque_pthread_t>> arg0,
  ffi.Pointer<_opaque_pthread_attr_t> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg2,
  ffi.Pointer<ffi.Void> arg3,
);

typedef _dart_pthread_create = int Function(
  ffi.Pointer<ffi.Pointer<_opaque_pthread_t>> arg0,
  ffi.Pointer<_opaque_pthread_attr_t> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg2,
  ffi.Pointer<ffi.Void> arg3,
);

typedef _c_pthread_detach = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _dart_pthread_detach = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _c_pthread_equal = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<_opaque_pthread_t> arg1,
);

typedef _dart_pthread_equal = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<_opaque_pthread_t> arg1,
);

typedef _c_pthread_exit = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_pthread_exit = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_pthread_getconcurrency = ffi.Int32 Function();

typedef _dart_pthread_getconcurrency = int Function();

typedef _c_pthread_getschedparam = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<sched_param> arg2,
);

typedef _dart_pthread_getschedparam = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<sched_param> arg2,
);

typedef _c_pthread_getspecific = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 arg0,
);

typedef _dart_pthread_getspecific = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef _c_pthread_join = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
);

typedef _dart_pthread_join = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
);

typedef _typedefC_6 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_pthread_key_create = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg1,
);

typedef _dart_pthread_key_create = int Function(
  ffi.Pointer<ffi.Uint64> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg1,
);

typedef _c_pthread_key_delete = ffi.Int32 Function(
  ffi.Uint64 arg0,
);

typedef _dart_pthread_key_delete = int Function(
  int arg0,
);

typedef _c_pthread_mutex_destroy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
);

typedef _dart_pthread_mutex_destroy = int Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
);

typedef _c_pthread_mutex_getprioceiling = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_mutex_getprioceiling = int Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_mutex_init = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg1,
);

typedef _dart_pthread_mutex_init = int Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg1,
);

typedef _c_pthread_mutex_lock = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
);

typedef _dart_pthread_mutex_lock = int Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
);

typedef _c_pthread_mutex_setprioceiling = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_pthread_mutex_setprioceiling = int Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_pthread_mutex_trylock = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
);

typedef _dart_pthread_mutex_trylock = int Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
);

typedef _c_pthread_mutex_unlock = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
);

typedef _dart_pthread_mutex_unlock = int Function(
  ffi.Pointer<_opaque_pthread_mutex_t> arg0,
);

typedef _c_pthread_mutexattr_destroy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
);

typedef _dart_pthread_mutexattr_destroy = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
);

typedef _c_pthread_mutexattr_getprioceiling = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_mutexattr_getprioceiling = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_mutexattr_getprotocol = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_mutexattr_getprotocol = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_mutexattr_getpshared = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_mutexattr_getpshared = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_mutexattr_gettype = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_mutexattr_gettype = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_mutexattr_getpolicy_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_mutexattr_getpolicy_np = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_mutexattr_init = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
);

typedef _dart_pthread_mutexattr_init = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
);

typedef _c_pthread_mutexattr_setprioceiling = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_mutexattr_setprioceiling = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  int arg1,
);

typedef _c_pthread_mutexattr_setprotocol = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_mutexattr_setprotocol = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  int arg1,
);

typedef _c_pthread_mutexattr_setpshared = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_mutexattr_setpshared = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  int arg1,
);

typedef _c_pthread_mutexattr_settype = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_mutexattr_settype = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  int arg1,
);

typedef _c_pthread_mutexattr_setpolicy_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_mutexattr_setpolicy_np = int Function(
  ffi.Pointer<_opaque_pthread_mutexattr_t> arg0,
  int arg1,
);

typedef _typedefC_7 = ffi.Void Function();

typedef _c_pthread_once = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_once_t> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> arg1,
);

typedef _dart_pthread_once = int Function(
  ffi.Pointer<_opaque_pthread_once_t> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> arg1,
);

typedef _c_pthread_rwlock_destroy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _dart_pthread_rwlock_destroy = int Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _c_pthread_rwlock_init = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg1,
);

typedef _dart_pthread_rwlock_init = int Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg1,
);

typedef _c_pthread_rwlock_rdlock = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _dart_pthread_rwlock_rdlock = int Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _c_pthread_rwlock_tryrdlock = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _dart_pthread_rwlock_tryrdlock = int Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _c_pthread_rwlock_trywrlock = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _dart_pthread_rwlock_trywrlock = int Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _c_pthread_rwlock_wrlock = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _dart_pthread_rwlock_wrlock = int Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _c_pthread_rwlock_unlock = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _dart_pthread_rwlock_unlock = int Function(
  ffi.Pointer<_opaque_pthread_rwlock_t> arg0,
);

typedef _c_pthread_rwlockattr_destroy = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
);

typedef _dart_pthread_rwlockattr_destroy = int Function(
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
);

typedef _c_pthread_rwlockattr_getpshared = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_rwlockattr_getpshared = int Function(
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_rwlockattr_init = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
);

typedef _dart_pthread_rwlockattr_init = int Function(
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
);

typedef _c_pthread_rwlockattr_setpshared = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_rwlockattr_setpshared = int Function(
  ffi.Pointer<_opaque_pthread_rwlockattr_t> arg0,
  int arg1,
);

typedef _c_pthread_self = ffi.Pointer<_opaque_pthread_t> Function();

typedef _dart_pthread_self = ffi.Pointer<_opaque_pthread_t> Function();

typedef _c_pthread_setcancelstate = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_setcancelstate = int Function(
  int arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_setcanceltype = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_pthread_setcanceltype = int Function(
  int arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_pthread_setconcurrency = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_pthread_setconcurrency = int Function(
  int arg0,
);

typedef _c_pthread_setschedparam = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<sched_param> arg2,
);

typedef _dart_pthread_setschedparam = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  int arg1,
  ffi.Pointer<sched_param> arg2,
);

typedef _c_pthread_setspecific = ffi.Int32 Function(
  ffi.Uint64 arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_pthread_setspecific = int Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_pthread_testcancel = ffi.Void Function();

typedef _dart_pthread_testcancel = void Function();

typedef _c_pthread_is_threaded_np = ffi.Int32 Function();

typedef _dart_pthread_is_threaded_np = int Function();

typedef _c_pthread_threadid_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _dart_pthread_threadid_np = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _c_pthread_getname_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_pthread_getname_np = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_pthread_setname_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_pthread_setname_np = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_pthread_main_np = ffi.Int32 Function();

typedef _dart_pthread_main_np = int Function();

typedef _c_pthread_mach_thread_np = ffi.Uint32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _dart_pthread_mach_thread_np = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _c_pthread_get_stacksize_np = ffi.Uint64 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _dart_pthread_get_stacksize_np = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _c_pthread_get_stackaddr_np = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _dart_pthread_get_stackaddr_np = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
);

typedef _c_pthread_cond_signal_thread_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_t> arg1,
);

typedef _dart_pthread_cond_signal_thread_np = int Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_t> arg1,
);

typedef _c_pthread_cond_timedwait_relative_np = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_mutex_t> arg1,
  ffi.Pointer<timespec> arg2,
);

typedef _dart_pthread_cond_timedwait_relative_np = int Function(
  ffi.Pointer<_opaque_pthread_cond_t> arg0,
  ffi.Pointer<_opaque_pthread_mutex_t> arg1,
  ffi.Pointer<timespec> arg2,
);

typedef _typedefC_8 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_pthread_create_suspended_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_opaque_pthread_t>> arg0,
  ffi.Pointer<_opaque_pthread_attr_t> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> arg2,
  ffi.Pointer<ffi.Void> arg3,
);

typedef _dart_pthread_create_suspended_np = int Function(
  ffi.Pointer<ffi.Pointer<_opaque_pthread_t>> arg0,
  ffi.Pointer<_opaque_pthread_attr_t> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> arg2,
  ffi.Pointer<ffi.Void> arg3,
);

typedef _c_pthread_kill = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_kill = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  int arg1,
);

typedef _c_pthread_from_mach_thread_np = ffi.Pointer<_opaque_pthread_t>
    Function(
  ffi.Uint32 arg0,
);

typedef _dart_pthread_from_mach_thread_np = ffi.Pointer<_opaque_pthread_t>
    Function(
  int arg0,
);

typedef _c_pthread_sigmask = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _dart_pthread_sigmask = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _c_pthread_yield_np = ffi.Void Function();

typedef _dart_pthread_yield_np = void Function();

typedef _c_gpioInitialise = ffi.Int32 Function();

typedef _dart_gpioInitialise = int Function();

typedef _c_gpioTerminate = ffi.Void Function();

typedef _dart_gpioTerminate = void Function();

typedef _c_gpioSetMode = ffi.Int32 Function(
  ffi.Uint32 gpio,
  ffi.Uint32 mode,
);

typedef _dart_gpioSetMode = int Function(
  int gpio,
  int mode,
);

typedef _c_gpioGetMode = ffi.Int32 Function(
  ffi.Uint32 gpio,
);

typedef _dart_gpioGetMode = int Function(
  int gpio,
);

typedef _c_gpioSetPullUpDown = ffi.Int32 Function(
  ffi.Uint32 gpio,
  ffi.Uint32 pud,
);

typedef _dart_gpioSetPullUpDown = int Function(
  int gpio,
  int pud,
);

typedef _c_gpioRead = ffi.Int32 Function(
  ffi.Uint32 gpio,
);

typedef _dart_gpioRead = int Function(
  int gpio,
);

typedef _c_gpioWrite = ffi.Int32 Function(
  ffi.Uint32 gpio,
  ffi.Uint32 level,
);

typedef _dart_gpioWrite = int Function(
  int gpio,
  int level,
);

typedef _c_gpioPWM = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
  ffi.Uint32 dutycycle,
);

typedef _dart_gpioPWM = int Function(
  int user_gpio,
  int dutycycle,
);

typedef _c_gpioGetPWMdutycycle = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
);

typedef _dart_gpioGetPWMdutycycle = int Function(
  int user_gpio,
);

typedef _c_gpioSetPWMrange = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
  ffi.Uint32 range,
);

typedef _dart_gpioSetPWMrange = int Function(
  int user_gpio,
  int range,
);

typedef _c_gpioGetPWMrange = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
);

typedef _dart_gpioGetPWMrange = int Function(
  int user_gpio,
);

typedef _c_gpioGetPWMrealRange = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
);

typedef _dart_gpioGetPWMrealRange = int Function(
  int user_gpio,
);

typedef _c_gpioSetPWMfrequency = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
  ffi.Uint32 frequency,
);

typedef _dart_gpioSetPWMfrequency = int Function(
  int user_gpio,
  int frequency,
);

typedef _c_gpioGetPWMfrequency = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
);

typedef _dart_gpioGetPWMfrequency = int Function(
  int user_gpio,
);

typedef _c_gpioServo = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
  ffi.Uint32 pulsewidth,
);

typedef _dart_gpioServo = int Function(
  int user_gpio,
  int pulsewidth,
);

typedef _c_gpioGetServoPulsewidth = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
);

typedef _dart_gpioGetServoPulsewidth = int Function(
  int user_gpio,
);

typedef gpioAlertFunc_t = ffi.Void Function(
  ffi.Int32,
  ffi.Int32,
  ffi.Uint32,
);

typedef _c_gpioSetAlertFunc = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
  ffi.Pointer<ffi.NativeFunction<gpioAlertFunc_t>> f,
);

typedef _dart_gpioSetAlertFunc = int Function(
  int user_gpio,
  ffi.Pointer<ffi.NativeFunction<gpioAlertFunc_t>> f,
);

typedef gpioAlertFuncEx_t = ffi.Void Function(
  ffi.Int32,
  ffi.Int32,
  ffi.Uint32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_gpioSetAlertFuncEx = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
  ffi.Pointer<ffi.NativeFunction<gpioAlertFuncEx_t>> f,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_gpioSetAlertFuncEx = int Function(
  int user_gpio,
  ffi.Pointer<ffi.NativeFunction<gpioAlertFuncEx_t>> f,
  ffi.Pointer<ffi.Void> userdata,
);

typedef gpioISRFunc_t = ffi.Void Function(
  ffi.Int32,
  ffi.Int32,
  ffi.Uint32,
);

typedef _c_gpioSetISRFunc = ffi.Int32 Function(
  ffi.Uint32 gpio,
  ffi.Uint32 edge,
  ffi.Int32 timeout,
  ffi.Pointer<ffi.NativeFunction<gpioISRFunc_t>> f,
);

typedef _dart_gpioSetISRFunc = int Function(
  int gpio,
  int edge,
  int timeout,
  ffi.Pointer<ffi.NativeFunction<gpioISRFunc_t>> f,
);

typedef gpioISRFuncEx_t = ffi.Void Function(
  ffi.Int32,
  ffi.Int32,
  ffi.Uint32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_gpioSetISRFuncEx = ffi.Int32 Function(
  ffi.Uint32 gpio,
  ffi.Uint32 edge,
  ffi.Int32 timeout,
  ffi.Pointer<ffi.NativeFunction<gpioISRFuncEx_t>> f,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_gpioSetISRFuncEx = int Function(
  int gpio,
  int edge,
  int timeout,
  ffi.Pointer<ffi.NativeFunction<gpioISRFuncEx_t>> f,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _c_gpioNotifyOpen = ffi.Int32 Function();

typedef _dart_gpioNotifyOpen = int Function();

typedef _c_gpioNotifyOpenWithSize = ffi.Int32 Function(
  ffi.Int32 bufSize,
);

typedef _dart_gpioNotifyOpenWithSize = int Function(
  int bufSize,
);

typedef _c_gpioNotifyBegin = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Uint32 bits,
);

typedef _dart_gpioNotifyBegin = int Function(
  int handle,
  int bits,
);

typedef _c_gpioNotifyPause = ffi.Int32 Function(
  ffi.Uint32 handle,
);

typedef _dart_gpioNotifyPause = int Function(
  int handle,
);

typedef _c_gpioNotifyClose = ffi.Int32 Function(
  ffi.Uint32 handle,
);

typedef _dart_gpioNotifyClose = int Function(
  int handle,
);

typedef _c_gpioWaveClear = ffi.Int32 Function();

typedef _dart_gpioWaveClear = int Function();

typedef _c_gpioWaveAddNew = ffi.Int32 Function();

typedef _dart_gpioWaveAddNew = int Function();

typedef _c_gpioWaveAddGeneric = ffi.Int32 Function(
  ffi.Uint32 numPulses,
  ffi.Pointer<gpioPulse_t> pulses,
);

typedef _dart_gpioWaveAddGeneric = int Function(
  int numPulses,
  ffi.Pointer<gpioPulse_t> pulses,
);

typedef _c_gpioWaveAddSerial = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
  ffi.Uint32 baud,
  ffi.Uint32 data_bits,
  ffi.Uint32 stop_bits,
  ffi.Uint32 offset,
  ffi.Uint32 numBytes,
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_gpioWaveAddSerial = int Function(
  int user_gpio,
  int baud,
  int data_bits,
  int stop_bits,
  int offset,
  int numBytes,
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_gpioWaveCreate = ffi.Int32 Function();

typedef _dart_gpioWaveCreate = int Function();

typedef _c_gpioWaveCreatePad = ffi.Int32 Function(
  ffi.Int32 pctCB,
  ffi.Int32 pctBOOL,
  ffi.Int32 pctTOOL,
);

typedef _dart_gpioWaveCreatePad = int Function(
  int pctCB,
  int pctBOOL,
  int pctTOOL,
);

typedef _c_gpioWaveDelete = ffi.Int32 Function(
  ffi.Uint32 wave_id,
);

typedef _dart_gpioWaveDelete = int Function(
  int wave_id,
);

typedef _c_gpioWaveTxSend = ffi.Int32 Function(
  ffi.Uint32 wave_id,
  ffi.Uint32 wave_mode,
);

typedef _dart_gpioWaveTxSend = int Function(
  int wave_id,
  int wave_mode,
);

typedef _c_gpioWaveChain = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint32 bufSize,
);

typedef _dart_gpioWaveChain = int Function(
  ffi.Pointer<ffi.Int8> buf,
  int bufSize,
);

typedef _c_gpioWaveTxAt = ffi.Int32 Function();

typedef _dart_gpioWaveTxAt = int Function();

typedef _c_gpioWaveTxBusy = ffi.Int32 Function();

typedef _dart_gpioWaveTxBusy = int Function();

typedef _c_gpioWaveTxStop = ffi.Int32 Function();

typedef _dart_gpioWaveTxStop = int Function();

typedef _c_gpioWaveGetMicros = ffi.Int32 Function();

typedef _dart_gpioWaveGetMicros = int Function();

typedef _c_gpioWaveGetHighMicros = ffi.Int32 Function();

typedef _dart_gpioWaveGetHighMicros = int Function();

typedef _c_gpioWaveGetMaxMicros = ffi.Int32 Function();

typedef _dart_gpioWaveGetMaxMicros = int Function();

typedef _c_gpioWaveGetPulses = ffi.Int32 Function();

typedef _dart_gpioWaveGetPulses = int Function();

typedef _c_gpioWaveGetHighPulses = ffi.Int32 Function();

typedef _dart_gpioWaveGetHighPulses = int Function();

typedef _c_gpioWaveGetMaxPulses = ffi.Int32 Function();

typedef _dart_gpioWaveGetMaxPulses = int Function();

typedef _c_gpioWaveGetCbs = ffi.Int32 Function();

typedef _dart_gpioWaveGetCbs = int Function();

typedef _c_gpioWaveGetHighCbs = ffi.Int32 Function();

typedef _dart_gpioWaveGetHighCbs = int Function();

typedef _c_gpioWaveGetMaxCbs = ffi.Int32 Function();

typedef _dart_gpioWaveGetMaxCbs = int Function();

typedef _c_gpioSerialReadOpen = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
  ffi.Uint32 baud,
  ffi.Uint32 data_bits,
);

typedef _dart_gpioSerialReadOpen = int Function(
  int user_gpio,
  int baud,
  int data_bits,
);

typedef _c_gpioSerialReadInvert = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
  ffi.Uint32 invert,
);

typedef _dart_gpioSerialReadInvert = int Function(
  int user_gpio,
  int invert,
);

typedef _c_gpioSerialRead = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
  ffi.Pointer<ffi.Void> buf,
  ffi.Uint64 bufSize,
);

typedef _dart_gpioSerialRead = int Function(
  int user_gpio,
  ffi.Pointer<ffi.Void> buf,
  int bufSize,
);

typedef _c_gpioSerialReadClose = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
);

typedef _dart_gpioSerialReadClose = int Function(
  int user_gpio,
);

typedef _c_i2cOpen = ffi.Int32 Function(
  ffi.Uint32 i2cBus,
  ffi.Uint32 i2cAddr,
  ffi.Uint32 i2cFlags,
);

typedef _dart_i2cOpen = int Function(
  int i2cBus,
  int i2cAddr,
  int i2cFlags,
);

typedef _c_i2cClose = ffi.Int32 Function(
  ffi.Uint32 handle,
);

typedef _dart_i2cClose = int Function(
  int handle,
);

typedef _c_i2cWriteQuick = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Uint32 bit,
);

typedef _dart_i2cWriteQuick = int Function(
  int handle,
  int bit,
);

typedef _c_i2cWriteByte = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Uint32 bVal,
);

typedef _dart_i2cWriteByte = int Function(
  int handle,
  int bVal,
);

typedef _c_i2cReadByte = ffi.Int32 Function(
  ffi.Uint32 handle,
);

typedef _dart_i2cReadByte = int Function(
  int handle,
);

typedef _c_i2cWriteByteData = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Uint32 i2cReg,
  ffi.Uint32 bVal,
);

typedef _dart_i2cWriteByteData = int Function(
  int handle,
  int i2cReg,
  int bVal,
);

typedef _c_i2cWriteWordData = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Uint32 i2cReg,
  ffi.Uint32 wVal,
);

typedef _dart_i2cWriteWordData = int Function(
  int handle,
  int i2cReg,
  int wVal,
);

typedef _c_i2cReadByteData = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Uint32 i2cReg,
);

typedef _dart_i2cReadByteData = int Function(
  int handle,
  int i2cReg,
);

typedef _c_i2cReadWordData = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Uint32 i2cReg,
);

typedef _dart_i2cReadWordData = int Function(
  int handle,
  int i2cReg,
);

typedef _c_i2cProcessCall = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Uint32 i2cReg,
  ffi.Uint32 wVal,
);

typedef _dart_i2cProcessCall = int Function(
  int handle,
  int i2cReg,
  int wVal,
);

typedef _c_i2cWriteBlockData = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Uint32 i2cReg,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint32 count,
);

typedef _dart_i2cWriteBlockData = int Function(
  int handle,
  int i2cReg,
  ffi.Pointer<ffi.Int8> buf,
  int count,
);

typedef _c_i2cReadBlockData = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Uint32 i2cReg,
  ffi.Pointer<ffi.Int8> buf,
);

typedef _dart_i2cReadBlockData = int Function(
  int handle,
  int i2cReg,
  ffi.Pointer<ffi.Int8> buf,
);

typedef _c_i2cBlockProcessCall = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Uint32 i2cReg,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint32 count,
);

typedef _dart_i2cBlockProcessCall = int Function(
  int handle,
  int i2cReg,
  ffi.Pointer<ffi.Int8> buf,
  int count,
);

typedef _c_i2cReadI2CBlockData = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Uint32 i2cReg,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint32 count,
);

typedef _dart_i2cReadI2CBlockData = int Function(
  int handle,
  int i2cReg,
  ffi.Pointer<ffi.Int8> buf,
  int count,
);

typedef _c_i2cWriteI2CBlockData = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Uint32 i2cReg,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint32 count,
);

typedef _dart_i2cWriteI2CBlockData = int Function(
  int handle,
  int i2cReg,
  ffi.Pointer<ffi.Int8> buf,
  int count,
);

typedef _c_i2cReadDevice = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint32 count,
);

typedef _dart_i2cReadDevice = int Function(
  int handle,
  ffi.Pointer<ffi.Int8> buf,
  int count,
);

typedef _c_i2cWriteDevice = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint32 count,
);

typedef _dart_i2cWriteDevice = int Function(
  int handle,
  ffi.Pointer<ffi.Int8> buf,
  int count,
);

typedef _c_i2cSwitchCombined = ffi.Void Function(
  ffi.Int32 setting,
);

typedef _dart_i2cSwitchCombined = void Function(
  int setting,
);

typedef _c_i2cSegments = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Pointer<pi_i2c_msg_t> segs,
  ffi.Uint32 numSegs,
);

typedef _dart_i2cSegments = int Function(
  int handle,
  ffi.Pointer<pi_i2c_msg_t> segs,
  int numSegs,
);

typedef _c_i2cZip = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Pointer<ffi.Int8> inBuf,
  ffi.Uint32 inLen,
  ffi.Pointer<ffi.Int8> outBuf,
  ffi.Uint32 outLen,
);

typedef _dart_i2cZip = int Function(
  int handle,
  ffi.Pointer<ffi.Int8> inBuf,
  int inLen,
  ffi.Pointer<ffi.Int8> outBuf,
  int outLen,
);

typedef _c_bbI2COpen = ffi.Int32 Function(
  ffi.Uint32 SDA,
  ffi.Uint32 SCL,
  ffi.Uint32 baud,
);

typedef _dart_bbI2COpen = int Function(
  int SDA,
  int SCL,
  int baud,
);

typedef _c_bbI2CClose = ffi.Int32 Function(
  ffi.Uint32 SDA,
);

typedef _dart_bbI2CClose = int Function(
  int SDA,
);

typedef _c_bbI2CZip = ffi.Int32 Function(
  ffi.Uint32 SDA,
  ffi.Pointer<ffi.Int8> inBuf,
  ffi.Uint32 inLen,
  ffi.Pointer<ffi.Int8> outBuf,
  ffi.Uint32 outLen,
);

typedef _dart_bbI2CZip = int Function(
  int SDA,
  ffi.Pointer<ffi.Int8> inBuf,
  int inLen,
  ffi.Pointer<ffi.Int8> outBuf,
  int outLen,
);

typedef _c_bscXfer = ffi.Int32 Function(
  ffi.Pointer<bsc_xfer_t> bsc_xfer,
);

typedef _dart_bscXfer = int Function(
  ffi.Pointer<bsc_xfer_t> bsc_xfer,
);

typedef _c_bbSPIOpen = ffi.Int32 Function(
  ffi.Uint32 CS,
  ffi.Uint32 MISO,
  ffi.Uint32 MOSI,
  ffi.Uint32 SCLK,
  ffi.Uint32 baud,
  ffi.Uint32 spiFlags,
);

typedef _dart_bbSPIOpen = int Function(
  int CS,
  int MISO,
  int MOSI,
  int SCLK,
  int baud,
  int spiFlags,
);

typedef _c_bbSPIClose = ffi.Int32 Function(
  ffi.Uint32 CS,
);

typedef _dart_bbSPIClose = int Function(
  int CS,
);

typedef _c_bbSPIXfer = ffi.Int32 Function(
  ffi.Uint32 CS,
  ffi.Pointer<ffi.Int8> inBuf,
  ffi.Pointer<ffi.Int8> outBuf,
  ffi.Uint32 count,
);

typedef _dart_bbSPIXfer = int Function(
  int CS,
  ffi.Pointer<ffi.Int8> inBuf,
  ffi.Pointer<ffi.Int8> outBuf,
  int count,
);

typedef _c_spiOpen = ffi.Int32 Function(
  ffi.Uint32 spiChan,
  ffi.Uint32 baud,
  ffi.Uint32 spiFlags,
);

typedef _dart_spiOpen = int Function(
  int spiChan,
  int baud,
  int spiFlags,
);

typedef _c_spiClose = ffi.Int32 Function(
  ffi.Uint32 handle,
);

typedef _dart_spiClose = int Function(
  int handle,
);

typedef _c_spiRead = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint32 count,
);

typedef _dart_spiRead = int Function(
  int handle,
  ffi.Pointer<ffi.Int8> buf,
  int count,
);

typedef _c_spiWrite = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint32 count,
);

typedef _dart_spiWrite = int Function(
  int handle,
  ffi.Pointer<ffi.Int8> buf,
  int count,
);

typedef _c_spiXfer = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Pointer<ffi.Int8> txBuf,
  ffi.Pointer<ffi.Int8> rxBuf,
  ffi.Uint32 count,
);

typedef _dart_spiXfer = int Function(
  int handle,
  ffi.Pointer<ffi.Int8> txBuf,
  ffi.Pointer<ffi.Int8> rxBuf,
  int count,
);

typedef _c_serOpen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> sertty,
  ffi.Uint32 baud,
  ffi.Uint32 serFlags,
);

typedef _dart_serOpen = int Function(
  ffi.Pointer<ffi.Int8> sertty,
  int baud,
  int serFlags,
);

typedef _c_serClose = ffi.Int32 Function(
  ffi.Uint32 handle,
);

typedef _dart_serClose = int Function(
  int handle,
);

typedef _c_serWriteByte = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Uint32 bVal,
);

typedef _dart_serWriteByte = int Function(
  int handle,
  int bVal,
);

typedef _c_serReadByte = ffi.Int32 Function(
  ffi.Uint32 handle,
);

typedef _dart_serReadByte = int Function(
  int handle,
);

typedef _c_serWrite = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint32 count,
);

typedef _dart_serWrite = int Function(
  int handle,
  ffi.Pointer<ffi.Int8> buf,
  int count,
);

typedef _c_serRead = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint32 count,
);

typedef _dart_serRead = int Function(
  int handle,
  ffi.Pointer<ffi.Int8> buf,
  int count,
);

typedef _c_serDataAvailable = ffi.Int32 Function(
  ffi.Uint32 handle,
);

typedef _dart_serDataAvailable = int Function(
  int handle,
);

typedef _c_gpioTrigger = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
  ffi.Uint32 pulseLen,
  ffi.Uint32 level,
);

typedef _dart_gpioTrigger = int Function(
  int user_gpio,
  int pulseLen,
  int level,
);

typedef _c_gpioSetWatchdog = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
  ffi.Uint32 timeout,
);

typedef _dart_gpioSetWatchdog = int Function(
  int user_gpio,
  int timeout,
);

typedef _c_gpioNoiseFilter = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
  ffi.Uint32 steady,
  ffi.Uint32 active,
);

typedef _dart_gpioNoiseFilter = int Function(
  int user_gpio,
  int steady,
  int active,
);

typedef _c_gpioGlitchFilter = ffi.Int32 Function(
  ffi.Uint32 user_gpio,
  ffi.Uint32 steady,
);

typedef _dart_gpioGlitchFilter = int Function(
  int user_gpio,
  int steady,
);

typedef gpioGetSamplesFunc_t = ffi.Void Function(
  ffi.Pointer<gpioSample_t>,
  ffi.Int32,
);

typedef _c_gpioSetGetSamplesFunc = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<gpioGetSamplesFunc_t>> f,
  ffi.Uint32 bits,
);

typedef _dart_gpioSetGetSamplesFunc = int Function(
  ffi.Pointer<ffi.NativeFunction<gpioGetSamplesFunc_t>> f,
  int bits,
);

typedef gpioGetSamplesFuncEx_t = ffi.Void Function(
  ffi.Pointer<gpioSample_t>,
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_gpioSetGetSamplesFuncEx = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<gpioGetSamplesFuncEx_t>> f,
  ffi.Uint32 bits,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_gpioSetGetSamplesFuncEx = int Function(
  ffi.Pointer<ffi.NativeFunction<gpioGetSamplesFuncEx_t>> f,
  int bits,
  ffi.Pointer<ffi.Void> userdata,
);

typedef gpioTimerFunc_t = ffi.Void Function();

typedef _c_gpioSetTimerFunc = ffi.Int32 Function(
  ffi.Uint32 timer,
  ffi.Uint32 millis,
  ffi.Pointer<ffi.NativeFunction<gpioTimerFunc_t>> f,
);

typedef _dart_gpioSetTimerFunc = int Function(
  int timer,
  int millis,
  ffi.Pointer<ffi.NativeFunction<gpioTimerFunc_t>> f,
);

typedef gpioTimerFuncEx_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_gpioSetTimerFuncEx = ffi.Int32 Function(
  ffi.Uint32 timer,
  ffi.Uint32 millis,
  ffi.Pointer<ffi.NativeFunction<gpioTimerFuncEx_t>> f,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_gpioSetTimerFuncEx = int Function(
  int timer,
  int millis,
  ffi.Pointer<ffi.NativeFunction<gpioTimerFuncEx_t>> f,
  ffi.Pointer<ffi.Void> userdata,
);

typedef gpioThreadFunc_t = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_gpioStartThread = ffi.Pointer<ffi.Pointer<_opaque_pthread_t>>
    Function(
  ffi.Pointer<ffi.NativeFunction<gpioThreadFunc_t>> f,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_gpioStartThread = ffi.Pointer<ffi.Pointer<_opaque_pthread_t>>
    Function(
  ffi.Pointer<ffi.NativeFunction<gpioThreadFunc_t>> f,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _c_gpioStopThread = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_opaque_pthread_t>> pth,
);

typedef _dart_gpioStopThread = void Function(
  ffi.Pointer<ffi.Pointer<_opaque_pthread_t>> pth,
);

typedef _c_gpioStoreScript = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> script,
);

typedef _dart_gpioStoreScript = int Function(
  ffi.Pointer<ffi.Int8> script,
);

typedef _c_gpioRunScript = ffi.Int32 Function(
  ffi.Uint32 script_id,
  ffi.Uint32 numPar,
  ffi.Pointer<ffi.Uint32> param,
);

typedef _dart_gpioRunScript = int Function(
  int script_id,
  int numPar,
  ffi.Pointer<ffi.Uint32> param,
);

typedef _c_gpioUpdateScript = ffi.Int32 Function(
  ffi.Uint32 script_id,
  ffi.Uint32 numPar,
  ffi.Pointer<ffi.Uint32> param,
);

typedef _dart_gpioUpdateScript = int Function(
  int script_id,
  int numPar,
  ffi.Pointer<ffi.Uint32> param,
);

typedef _c_gpioScriptStatus = ffi.Int32 Function(
  ffi.Uint32 script_id,
  ffi.Pointer<ffi.Uint32> param,
);

typedef _dart_gpioScriptStatus = int Function(
  int script_id,
  ffi.Pointer<ffi.Uint32> param,
);

typedef _c_gpioStopScript = ffi.Int32 Function(
  ffi.Uint32 script_id,
);

typedef _dart_gpioStopScript = int Function(
  int script_id,
);

typedef _c_gpioDeleteScript = ffi.Int32 Function(
  ffi.Uint32 script_id,
);

typedef _dart_gpioDeleteScript = int Function(
  int script_id,
);

typedef gpioSignalFunc_t = ffi.Void Function(
  ffi.Int32,
);

typedef _c_gpioSetSignalFunc = ffi.Int32 Function(
  ffi.Uint32 signum,
  ffi.Pointer<ffi.NativeFunction<gpioSignalFunc_t>> f,
);

typedef _dart_gpioSetSignalFunc = int Function(
  int signum,
  ffi.Pointer<ffi.NativeFunction<gpioSignalFunc_t>> f,
);

typedef gpioSignalFuncEx_t = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_gpioSetSignalFuncEx = ffi.Int32 Function(
  ffi.Uint32 signum,
  ffi.Pointer<ffi.NativeFunction<gpioSignalFuncEx_t>> f,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_gpioSetSignalFuncEx = int Function(
  int signum,
  ffi.Pointer<ffi.NativeFunction<gpioSignalFuncEx_t>> f,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _c_gpioRead_Bits_0_31 = ffi.Uint32 Function();

typedef _dart_gpioRead_Bits_0_31 = int Function();

typedef _c_gpioRead_Bits_32_53 = ffi.Uint32 Function();

typedef _dart_gpioRead_Bits_32_53 = int Function();

typedef _c_gpioWrite_Bits_0_31_Clear = ffi.Int32 Function(
  ffi.Uint32 bits,
);

typedef _dart_gpioWrite_Bits_0_31_Clear = int Function(
  int bits,
);

typedef _c_gpioWrite_Bits_32_53_Clear = ffi.Int32 Function(
  ffi.Uint32 bits,
);

typedef _dart_gpioWrite_Bits_32_53_Clear = int Function(
  int bits,
);

typedef _c_gpioWrite_Bits_0_31_Set = ffi.Int32 Function(
  ffi.Uint32 bits,
);

typedef _dart_gpioWrite_Bits_0_31_Set = int Function(
  int bits,
);

typedef _c_gpioWrite_Bits_32_53_Set = ffi.Int32 Function(
  ffi.Uint32 bits,
);

typedef _dart_gpioWrite_Bits_32_53_Set = int Function(
  int bits,
);

typedef _c_gpioHardwareClock = ffi.Int32 Function(
  ffi.Uint32 gpio,
  ffi.Uint32 clkfreq,
);

typedef _dart_gpioHardwareClock = int Function(
  int gpio,
  int clkfreq,
);

typedef _c_gpioHardwarePWM = ffi.Int32 Function(
  ffi.Uint32 gpio,
  ffi.Uint32 PWMfreq,
  ffi.Uint32 PWMduty,
);

typedef _dart_gpioHardwarePWM = int Function(
  int gpio,
  int PWMfreq,
  int PWMduty,
);

typedef _c_gpioTime = ffi.Int32 Function(
  ffi.Uint32 timetype,
  ffi.Pointer<ffi.Int32> seconds,
  ffi.Pointer<ffi.Int32> micros,
);

typedef _dart_gpioTime = int Function(
  int timetype,
  ffi.Pointer<ffi.Int32> seconds,
  ffi.Pointer<ffi.Int32> micros,
);

typedef _c_gpioSleep = ffi.Int32 Function(
  ffi.Uint32 timetype,
  ffi.Int32 seconds,
  ffi.Int32 micros,
);

typedef _dart_gpioSleep = int Function(
  int timetype,
  int seconds,
  int micros,
);

typedef _c_gpioDelay = ffi.Uint32 Function(
  ffi.Uint32 micros,
);

typedef _dart_gpioDelay = int Function(
  int micros,
);

typedef _c_gpioTick = ffi.Uint32 Function();

typedef _dart_gpioTick = int Function();

typedef _c_gpioHardwareRevision = ffi.Uint32 Function();

typedef _dart_gpioHardwareRevision = int Function();

typedef _c_gpioVersion = ffi.Uint32 Function();

typedef _dart_gpioVersion = int Function();

typedef _c_gpioGetPad = ffi.Int32 Function(
  ffi.Uint32 pad,
);

typedef _dart_gpioGetPad = int Function(
  int pad,
);

typedef _c_gpioSetPad = ffi.Int32 Function(
  ffi.Uint32 pad,
  ffi.Uint32 padStrength,
);

typedef _dart_gpioSetPad = int Function(
  int pad,
  int padStrength,
);

typedef _c_eventMonitor = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Uint32 bits,
);

typedef _dart_eventMonitor = int Function(
  int handle,
  int bits,
);

typedef eventFunc_t = ffi.Void Function(
  ffi.Int32,
  ffi.Uint32,
);

typedef _c_eventSetFunc = ffi.Int32 Function(
  ffi.Uint32 event,
  ffi.Pointer<ffi.NativeFunction<eventFunc_t>> f,
);

typedef _dart_eventSetFunc = int Function(
  int event,
  ffi.Pointer<ffi.NativeFunction<eventFunc_t>> f,
);

typedef eventFuncEx_t = ffi.Void Function(
  ffi.Int32,
  ffi.Uint32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_eventSetFuncEx = ffi.Int32 Function(
  ffi.Uint32 event,
  ffi.Pointer<ffi.NativeFunction<eventFuncEx_t>> f,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _dart_eventSetFuncEx = int Function(
  int event,
  ffi.Pointer<ffi.NativeFunction<eventFuncEx_t>> f,
  ffi.Pointer<ffi.Void> userdata,
);

typedef _c_eventTrigger = ffi.Int32 Function(
  ffi.Uint32 event,
);

typedef _dart_eventTrigger = int Function(
  int event,
);

typedef _c_shell = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> scriptName,
  ffi.Pointer<ffi.Int8> scriptString,
);

typedef _dart_shell = int Function(
  ffi.Pointer<ffi.Int8> scriptName,
  ffi.Pointer<ffi.Int8> scriptString,
);

typedef _c_fileOpen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Uint32 mode,
);

typedef _dart_fileOpen = int Function(
  ffi.Pointer<ffi.Int8> file,
  int mode,
);

typedef _c_fileClose = ffi.Int32 Function(
  ffi.Uint32 handle,
);

typedef _dart_fileClose = int Function(
  int handle,
);

typedef _c_fileWrite = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint32 count,
);

typedef _dart_fileWrite = int Function(
  int handle,
  ffi.Pointer<ffi.Int8> buf,
  int count,
);

typedef _c_fileRead = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint32 count,
);

typedef _dart_fileRead = int Function(
  int handle,
  ffi.Pointer<ffi.Int8> buf,
  int count,
);

typedef _c_fileSeek = ffi.Int32 Function(
  ffi.Uint32 handle,
  ffi.Int32 seekOffset,
  ffi.Int32 seekFrom,
);

typedef _dart_fileSeek = int Function(
  int handle,
  int seekOffset,
  int seekFrom,
);

typedef _c_fileList = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> fpat,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint32 count,
);

typedef _dart_fileList = int Function(
  ffi.Pointer<ffi.Int8> fpat,
  ffi.Pointer<ffi.Int8> buf,
  int count,
);

typedef _c_gpioCfgBufferSize = ffi.Int32 Function(
  ffi.Uint32 cfgMillis,
);

typedef _dart_gpioCfgBufferSize = int Function(
  int cfgMillis,
);

typedef _c_gpioCfgClock = ffi.Int32 Function(
  ffi.Uint32 cfgMicros,
  ffi.Uint32 cfgPeripheral,
  ffi.Uint32 cfgSource,
);

typedef _dart_gpioCfgClock = int Function(
  int cfgMicros,
  int cfgPeripheral,
  int cfgSource,
);

typedef _c_gpioCfgDMAchannel = ffi.Int32 Function(
  ffi.Uint32 DMAchannel,
);

typedef _dart_gpioCfgDMAchannel = int Function(
  int DMAchannel,
);

typedef _c_gpioCfgDMAchannels = ffi.Int32 Function(
  ffi.Uint32 primaryChannel,
  ffi.Uint32 secondaryChannel,
);

typedef _dart_gpioCfgDMAchannels = int Function(
  int primaryChannel,
  int secondaryChannel,
);

typedef _c_gpioCfgPermissions = ffi.Int32 Function(
  ffi.Uint64 updateMask,
);

typedef _dart_gpioCfgPermissions = int Function(
  int updateMask,
);

typedef _c_gpioCfgSocketPort = ffi.Int32 Function(
  ffi.Uint32 port,
);

typedef _dart_gpioCfgSocketPort = int Function(
  int port,
);

typedef _c_gpioCfgInterfaces = ffi.Int32 Function(
  ffi.Uint32 ifFlags,
);

typedef _dart_gpioCfgInterfaces = int Function(
  int ifFlags,
);

typedef _c_gpioCfgMemAlloc = ffi.Int32 Function(
  ffi.Uint32 memAllocMode,
);

typedef _dart_gpioCfgMemAlloc = int Function(
  int memAllocMode,
);

typedef _c_gpioCfgNetAddr = ffi.Int32 Function(
  ffi.Int32 numSockAddr,
  ffi.Pointer<ffi.Uint32> sockAddr,
);

typedef _dart_gpioCfgNetAddr = int Function(
  int numSockAddr,
  ffi.Pointer<ffi.Uint32> sockAddr,
);

typedef _c_gpioCfgGetInternals = ffi.Uint32 Function();

typedef _dart_gpioCfgGetInternals = int Function();

typedef _c_gpioCfgSetInternals = ffi.Int32 Function(
  ffi.Uint32 cfgVal,
);

typedef _dart_gpioCfgSetInternals = int Function(
  int cfgVal,
);

typedef _c_gpioCustom1 = ffi.Int32 Function(
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<ffi.Int8> argx,
  ffi.Uint32 argc,
);

typedef _dart_gpioCustom1 = int Function(
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> argx,
  int argc,
);

typedef _c_gpioCustom2 = ffi.Int32 Function(
  ffi.Uint32 arg1,
  ffi.Pointer<ffi.Int8> argx,
  ffi.Uint32 argc,
  ffi.Pointer<ffi.Int8> retBuf,
  ffi.Uint32 retMax,
);

typedef _dart_gpioCustom2 = int Function(
  int arg1,
  ffi.Pointer<ffi.Int8> argx,
  int argc,
  ffi.Pointer<ffi.Int8> retBuf,
  int retMax,
);

typedef _c_rawWaveAddSPI = ffi.Int32 Function(
  ffi.Pointer<rawSPI_t> spi,
  ffi.Uint32 offset,
  ffi.Uint32 spiSS,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint32 spiTxBits,
  ffi.Uint32 spiBitFirst,
  ffi.Uint32 spiBitLast,
  ffi.Uint32 spiBits,
);

typedef _dart_rawWaveAddSPI = int Function(
  ffi.Pointer<rawSPI_t> spi,
  int offset,
  int spiSS,
  ffi.Pointer<ffi.Int8> buf,
  int spiTxBits,
  int spiBitFirst,
  int spiBitLast,
  int spiBits,
);

typedef _c_rawWaveAddGeneric = ffi.Int32 Function(
  ffi.Uint32 numPulses,
  ffi.Pointer<rawWave_t> pulses,
);

typedef _dart_rawWaveAddGeneric = int Function(
  int numPulses,
  ffi.Pointer<rawWave_t> pulses,
);

typedef _c_rawWaveCB = ffi.Uint32 Function();

typedef _dart_rawWaveCB = int Function();

typedef _c_rawWaveCBAdr = ffi.Pointer<rawCbs_t> Function(
  ffi.Int32 cbNum,
);

typedef _dart_rawWaveCBAdr = ffi.Pointer<rawCbs_t> Function(
  int cbNum,
);

typedef _c_rawWaveGetOOL = ffi.Uint32 Function(
  ffi.Int32 pos,
);

typedef _dart_rawWaveGetOOL = int Function(
  int pos,
);

typedef _c_rawWaveSetOOL = ffi.Void Function(
  ffi.Int32 pos,
  ffi.Uint32 lVal,
);

typedef _dart_rawWaveSetOOL = void Function(
  int pos,
  int lVal,
);

typedef _c_rawWaveGetOut = ffi.Uint32 Function(
  ffi.Int32 pos,
);

typedef _dart_rawWaveGetOut = int Function(
  int pos,
);

typedef _c_rawWaveSetOut = ffi.Void Function(
  ffi.Int32 pos,
  ffi.Uint32 lVal,
);

typedef _dart_rawWaveSetOut = void Function(
  int pos,
  int lVal,
);

typedef _c_rawWaveGetIn = ffi.Uint32 Function(
  ffi.Int32 pos,
);

typedef _dart_rawWaveGetIn = int Function(
  int pos,
);

typedef _c_rawWaveSetIn = ffi.Void Function(
  ffi.Int32 pos,
  ffi.Uint32 lVal,
);

typedef _dart_rawWaveSetIn = void Function(
  int pos,
  int lVal,
);

typedef _c_getBitInBytes = ffi.Int32 Function(
  ffi.Int32 bitPos,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Int32 numBits,
);

typedef _dart_getBitInBytes = int Function(
  int bitPos,
  ffi.Pointer<ffi.Int8> buf,
  int numBits,
);

typedef _c_putBitInBytes = ffi.Void Function(
  ffi.Int32 bitPos,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Int32 bit,
);

typedef _dart_putBitInBytes = void Function(
  int bitPos,
  ffi.Pointer<ffi.Int8> buf,
  int bit,
);

typedef _c_time_time = ffi.Double Function();

typedef _dart_time_time = double Function();

typedef _c_time_sleep = ffi.Void Function(
  ffi.Double seconds,
);

typedef _dart_time_sleep = void Function(
  double seconds,
);

typedef _c_rawDumpWave = ffi.Void Function();

typedef _dart_rawDumpWave = void Function();

typedef _c_rawDumpScript = ffi.Void Function(
  ffi.Uint32 script_id,
);

typedef _dart_rawDumpScript = void Function(
  int script_id,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
